<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Bryce Vandegrift&#39;s Website</title>
		<link>https://brycev.com/</link>
		<description>Updates to Bryce Vandegrift's blog</description>
		<language>en-us</language>
		
		<atom:link href="https://brycev.com/rss.xml" rel="self" type="application/rss+xml" />
		
		
		<item>
			<title>New Domain Name</title>
			<link>https://brycev.com/blog/new-domain-name/</link>
			<pubDate>Wed, 14 May 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/new-domain-name/</guid>
			<description>&lt;p&gt;It&amp;rsquo;s about time that I got a new domain name for my website. My current/old
domain name, &lt;a href=&#34;https://brycevandegrift.xyz&#34;&gt;brycevandegrift.xyz&lt;/a&gt;, is quite a
cumbersome and unorthodox domain name. It&amp;rsquo;s not easy to remember and the
&lt;code&gt;.xyz&lt;/code&gt; domain name can also be somewhat confusing. Not only that, but I&amp;rsquo;ve had
less tech literate people tell me that they thought my domain wasn&amp;rsquo;t actually
a real domain name. Add to the fact that many email services automatically
mark &lt;code&gt;.xyz&lt;/code&gt; domain names as spam, and you can see why I want to change my
domain name.&lt;/p&gt;
&lt;p&gt;I originally got a &lt;code&gt;.xyz&lt;/code&gt; domain name because it was fairly cheap (only
&lt;strong&gt;99Â¢&lt;/strong&gt;!), however using my &lt;em&gt;full&lt;/em&gt; name was probably not the right way to go.
My emails also got marked as spam or just filtered by some email servers.&lt;/p&gt;
&lt;h2 id=&#34;new-domain-name&#34;&gt;New domain name&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been eyeballing &lt;strong&gt;&lt;a href=&#34;https://brycev.com&#34;&gt;brycev.com&lt;/a&gt;&lt;/strong&gt; for quite some time and
I finally pulled the trigger and bought it. &lt;code&gt;.com&lt;/code&gt; domains are usually the
most memorable and trusted domain names out there so I decided to go with
that. Right now &lt;code&gt;brycev.com&lt;/code&gt; just redirects to &lt;code&gt;brycevandegrift.xyz&lt;/code&gt;, but over
the next few weeks I will be slowly replacing instances of my old domain name
with my new domain name. I will probably also keep &lt;code&gt;brycevandegrift.xyz&lt;/code&gt;
indefinitely and have it redirect to &lt;code&gt;brycev.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll slowly migrate my website, email, and XMPP server over to using my new
domain name. I&amp;rsquo;ll also need to issue a new GPG/PGP key for my new email
address. So keep an eye out and I&amp;rsquo;ll post any necessary updates.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Blogging on Paper</title>
			<link>https://brycev.com/blog/blogging-on-paper/</link>
			<pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/blogging-on-paper/</guid>
			<description>&lt;p&gt;I&amp;rsquo;ve been wanting to post more articles on my blog, however I often
find myself away from my computer or I often have more important
tasks to take care of on my computer. Either way, I can&amp;rsquo;t write
as many articles for my blog as I would like to on my computer.&lt;/p&gt;
&lt;p&gt;It wasn&amp;rsquo;t until I read a blog post by Ray Patrick (who
has sadly taken down his blog) titled
&lt;a href=&#34;https://web.archive.org/web/20240229190333if_/https://raypatrick.xyz/blog/2024/01/24/in-praise-of-the-manual-typewriter/&#34;&gt;&amp;ldquo;In Praise of the Manual Typewriter&amp;rdquo;&lt;/a&gt;
that I formed an idea. I could type out the articles
that I want to compose on a typewriter. This would allow me to
formulate any articles that I would like to later post to my blog.
I could also handwrite any articles if needed.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been in possession of a Royal Mercury typewriter
for quite some time now and I have been looking to get some use
out of it. It&amp;rsquo;s a somewhat small, portable typewriter that is easy
to carry around. This means that I can take it with me almost anywhere
that I go. And guess what? I don&amp;rsquo;t have to constantly keep it charged
like a laptop&amp;hellip;although it does need paper and ink which could be
a slight disadvantage.&lt;/p&gt;
&lt;p&gt;I also realized that I could use OCR (Optical Character
Recognition) programs like &lt;a href=&#34;https://tesseract-ocr.github.io/&#34;&gt;Tesseract&lt;/a&gt;
in order to easily convert
anything that I type or write while I&amp;rsquo;m away from my computer into
text to put on my blog. I might have to do some manual editing and
correcting once it&amp;rsquo;s converted into plaintext, but I think that
the extra effort would be well worth it.&lt;/p&gt;
&lt;p&gt;This method of writing articles might very much help me
to write more in general, not just for my blog. Keep an eye out
though, you might see me putting more on my blog/website within the
upcoming months.&lt;/p&gt;
&lt;hr&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/paper-blog.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/paper-blog.webp&#34; alt=&#34;This post written on paper&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

</description>
		</item>
		
		<item>
			<title>OpenBSD Server: smtpd</title>
			<link>https://brycev.com/blog/openbsd-smtpd/</link>
			<pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/openbsd-smtpd/</guid>
			<description>&lt;p&gt;At last, the final part to this series. You can catch up on parts 1 and 2
&lt;a href=&#34;https://brycev.com/blog/openbsd-server-install&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://brycev.com/blog/openbsd-httpd&#34;&gt;here&lt;/a&gt; respectively.
Setting up an email server is no easy task, it takes a lot of configuration and
sometimes trial and error. This guide should be good enough for small email
servers that don&amp;rsquo;t get too many emails.
So let&amp;rsquo;s go ahead and finally setup an email server for our system.&lt;/p&gt;
&lt;h2 id=&#34;some-needed-packages&#34;&gt;Some Needed Packages&lt;/h2&gt;
&lt;p&gt;First, we need to install some extra packages for our email server to work the
way we want it to. We will need &lt;code&gt;rspamd&lt;/code&gt; to filter out spam, &lt;code&gt;dovecot&lt;/code&gt; in order
to use IMAP and or POP3 to view our emails, and we will need
&lt;code&gt;dovecot-pigeonhole&lt;/code&gt; to help sort our emails:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas pkg_add rspamd-- dovecot-- dovecot-pigeonhole-- opensmtpd-filter-rspamd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dns-records&#34;&gt;DNS Records&lt;/h2&gt;
&lt;p&gt;In order for our email server to properly work and also to not get filtered or
marked as spam, we will need to add some DNS records.&lt;/p&gt;
&lt;h3 id=&#34;mx-record&#34;&gt;MX Record&lt;/h3&gt;
&lt;p&gt;A MX record is required to tell other SMTP servers where to deliver emails
sent to our address. For our MX record we can have our emails redirected to
&lt;code&gt;mail.example.com&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. When creating an MX record, this is what it should look
like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Record Type     Host        Value        MX Priority    TTL
     V            V           V                V         V
    MX            @    mail.example.com        0        3600
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our record type should (obviously) be MX, our host should be empty (which is
sometimes represented as an &lt;code&gt;@&lt;/code&gt; symbol), our value is where our mail should go
which is &lt;code&gt;mail.example.com&lt;/code&gt;, our MX priority should just be 0 for now, and our
TTL is set to 3600 seconds (or 1 hour).&lt;/p&gt;
&lt;p&gt;For reference, this is how my MX record is setup for &lt;code&gt;brycevandegrift.xyz&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/mx-record.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/mx-record.webp&#34; alt=&#34;My personal MX record&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h3 id=&#34;spf-record&#34;&gt;SPF Record&lt;/h3&gt;
&lt;p&gt;Our SPF record is vital in order to detect spam. It defines what servers can
send emails from a domain. In our case, only &lt;code&gt;mail.example.com&lt;/code&gt; will be sending
emails on our behalf, so we can set our SPF record accordingly:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Record Type     Host        Value        TTL
     V            V           V           V
    TXT           @     v=spf1 mx all    3600
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our SPF record is just a normal TXT record that has the string &amp;ldquo;v=spf1 mx all&amp;rdquo;
in it which allows emails to be sent in reference to our MX record.&lt;/p&gt;
&lt;h3 id=&#34;dkim-record&#34;&gt;DKIM Record&lt;/h3&gt;
&lt;p&gt;We need a DKIM record in order to cryptographically sign and verify the
emails we send. Without DKIM your emails will &lt;strong&gt;NOT&lt;/strong&gt; be accepted by most email
servers and will be marked as spam. In order to use DKIM we will need to
generate our private and public keys on our system. We can generate our keys and
give them the correct permissions like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First enter root session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;umask &lt;span style=&#34;color:#ae81ff&#34;&gt;077&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;install -d -o root -g wheel -m &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; /etc/mail/dkim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;install -d -o root -g _rspamd -m &lt;span style=&#34;color:#ae81ff&#34;&gt;775&lt;/span&gt; /etc/mail/dkim/private
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl genrsa -out /etc/mail/dkim/private/example.com.key &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl rsa -in /etc/mail/dkim/private/example.com.key -pubout -out /etc/mail/dkim/example.com.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chgrp _rspamd /etc/mail/dkim/private/example.com.key /etc/mail/dkim/private/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;440&lt;/span&gt; /etc/mail/dkim/private/example.com.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;775&lt;/span&gt; /etc/mail/dkim/private/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Exit root session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we successfully generated our private and public DKIM keys, we need to
put our public DKIM key into our DKIM record. We can get our DKIM public key as
a single line by running this &lt;code&gt;awk&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/PUBLIC/ { $0=&amp;#34;&amp;#34; } { printf (&amp;#34;%s&amp;#34;,$0) } END { print }&amp;#39;&lt;/span&gt; /etc/mail/dkim/example.com.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now copy that string and put it into our DKIM record.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Record Type        Host                    Value                  TTL
     V               V                       V                     V
    TXT      dkim._domainkey   v=DKIM1;k=rsa;p=&amp;lt;YOUR DKIM KEY&amp;gt;    3600
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just replace &lt;code&gt;&amp;lt;YOUR DKIM KEY&amp;gt;&lt;/code&gt; with the string you just copied and your DKIM
record is good to go.&lt;/p&gt;
&lt;h3 id=&#34;dmarc-record&#34;&gt;DMARC Record&lt;/h3&gt;
&lt;p&gt;We now need to add a DMARC record to our DNS records. DMARC is just another way
of preventing email spoofing and spam by telling receiving email servers what to
do with potentially invalid emails. Here is a good default to use for you DMARC
record:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Record Type        Host                                Value                                  TTL
     V               V                                   V                                     V
    TXT              @     v=DMARC1;p=reject;rua=mailto:dmarc@example.com;sp=reject;aspf=r;   3600
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wow, the value for this record is quite long, let&amp;rsquo;s break down what it means.
&lt;code&gt;p=reject&lt;/code&gt; and &lt;code&gt;sp=reject&lt;/code&gt; just means to immediately discard any invalid emails,
&lt;code&gt;aspf=r&lt;/code&gt; means that &lt;em&gt;any&lt;/em&gt; email sent from &lt;em&gt;any&lt;/em&gt; subdomain of example.com is
valid, and &lt;code&gt;rua=dmarc@example.com&lt;/code&gt; tells where the mail server receives DMARC
reports (don&amp;rsquo;t worry, you shouldn&amp;rsquo;t care about DMARC reports, they are mostly
useless).&lt;/p&gt;
&lt;h3 id=&#34;ptr-record&#34;&gt;PTR Record&lt;/h3&gt;
&lt;p&gt;Finally, our last record! All you need to do is set a PTR record (also called a
Reverse DNS pointer) that points to
&lt;code&gt;mail.example.com&lt;/code&gt;. That&amp;rsquo;s it. This is yet &lt;strong&gt;another&lt;/strong&gt; mechanism to prevent
spam. Please note that there are different ways to set a PTR record, most ways
involve finding a &amp;ldquo;Reverse DNS&amp;rdquo; option for your VPS/hosting provider and using
that.&lt;/p&gt;
&lt;h2 id=&#34;email-configuration&#34;&gt;Email Configuration&lt;/h2&gt;
&lt;p&gt;At last, we can now configure the setting for our email server. Our first order
of business is to get a valid certificate for our &lt;code&gt;mail.example.com&lt;/code&gt; subdomain.
This process should be somewhat familiar if you read my last article. Let&amp;rsquo;s
first append this to the end of our &lt;code&gt;/etc/acme-client.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mail.example.com&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/private/mail.example.com.key&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;full&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;certificate&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/mail.example.com.fullchain.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;sign&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;letsencrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we just need to add this to &lt;code&gt;/etc/httpd.conf&lt;/code&gt; in order to get a certificate
for &lt;em&gt;any&lt;/em&gt; subdomain of example.com:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/.well-known/acme-challenge/*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/acme&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;strip&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;302&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://$HTTP_HOST$REQUEST_URI&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we just run this command to generate a certificate for &lt;code&gt;mail.example.com&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas acme-client -v mail.example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we shouldn&amp;rsquo;t forget to automatically renew our certificates, so change
&lt;code&gt;/etc/weekly.local&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check for new certificates every week&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acme-client example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acme-client mail.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rcctl restart httpd smtpd dovecot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;spam&#34;&gt;Spam&lt;/h3&gt;
&lt;p&gt;The first program that we should configure is &lt;code&gt;rspamd&lt;/code&gt;. Only a few things need
to be set in order for it to work properly. Go ahead and create a file at
&lt;code&gt;/etc/rspamd/local.d/dkim_signing.conf&lt;/code&gt; and add this to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This should always be true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;allow_username_mismatch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Allow rspamd to sign with our DKIM key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;example.com&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/mail/dkim/private/example.com.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;selector&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dkim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is entirely optional, but if you want more performance you can enable
and start &lt;code&gt;redis&lt;/code&gt; as a cache backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl enable redis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl start redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now enable and start &lt;code&gt;rspamd&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl enable rspamd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl start rspamd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;smtp&#34;&gt;SMTP&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s configure OpenSMTPD in order to send and receive emails. We will need
to create a config file at &lt;code&gt;/etc/mail/smtpd.conf&lt;/code&gt; and configure it like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set locations to certificates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;example.com&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/mail.example.com.fullchain.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;example.com&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/private/mail.example.com.key&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;example.com&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dhe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Delimiter for email addresses
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;smtp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub-addr-delim&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sets rspamd as our filter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rspamd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;proc-exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter-rspamd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sets ports to use for mail transfer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rspamd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;465&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;smtps&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auth&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mask-src&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rspamd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;587&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;tls-require&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;pki&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auth&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mask-src&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rspamd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load mail aliases
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;aliases&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;/etc/mail/aliases
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Actions for mail delievery
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lmtp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/dovecot/lmtp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;aliases&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outbound&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;relay&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Actions for recieving mail
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Actions for sending mail
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auth&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outbound&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outbound&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to place our mail delievery address in &lt;code&gt;/etc/mail/mailname&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mail.example.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can test our &lt;code&gt;smtpd&lt;/code&gt; config by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas smtpd -n -f /etc/mail/smtpd.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything is all good then you can restart &lt;code&gt;smtpd&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl restart smtpd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;imappop3&#34;&gt;IMAP/POP3&lt;/h3&gt;
&lt;p&gt;The last part of our email server is &lt;code&gt;dovecot&lt;/code&gt; which allows us to view our
emails using IMAP and or POP3. In order to use our certificates we will need to
configure &lt;code&gt;/etc/dovecot/conf.d/10-ssl.conf&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_cert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;/etc/ssl/mail.example.com.fullchain.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;/etc/ssl/private/mail.example.com.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ssl_dh&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;/etc/dovecot/dh.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to generate a Diffie-Hellman key in order to make each TLS connection
unique (these commands might take a &lt;em&gt;while&lt;/em&gt; to generate a key):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas openssl dhparam -out /etc/dovecot/dh.pem &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas chown _dovecot:_dovecot /etc/dovecot/dh.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; /etc/dovecot/dh.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to configure our mailbox and some basic settings for &lt;code&gt;dovecot&lt;/code&gt;. Edit
&lt;code&gt;/etc/dovecot/conf.d/10-mail.conf&lt;/code&gt; so it resembles the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Where to put user maildir
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_location&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;maildir&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:~&lt;/span&gt;/Maildir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inbox&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;inbox&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mmap_disable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;first_valid_uid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_plugin_dir&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /usr/local/lib/dovecot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;indexer-worker&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mbox_write_locks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fcntl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s edit &lt;code&gt;/etc/dovecot/conf.d/20-lmtp.conf&lt;/code&gt; in order to allow &lt;code&gt;sieve&lt;/code&gt; and mail
plugins:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lmtp&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_plugins&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_plugins&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sieve&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now meed to modify &lt;code&gt;/etc/dovecot/conf.d/15-mailboxes.conf&lt;/code&gt; and add this
inside the &lt;code&gt;namespace inbox {&lt;/code&gt; section of the file in order to create a Spam
folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mailbox&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spam&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;special_use&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Junk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don&amp;rsquo;t plan on using IMAP and only wish to use POP3 for viewing/sending
emails then this last step is entirely optional, however I encourage users to
use IMAP instead of POP3. To enable IMAP we just need to edit
&lt;code&gt;/etc/dovecot/conf.d/20-imap.conf&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;imap&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_plugins&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_plugins&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;imap_sieve&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;mail_max_userip_connections&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;sieve-and-filtering&#34;&gt;Sieve and Filtering&lt;/h4&gt;
&lt;p&gt;Finally, the last part of setting up &lt;code&gt;dovecot&lt;/code&gt; is configuring &lt;code&gt;sieve&lt;/code&gt; in order
to filter and group emails properly. Go ahead and edit
&lt;code&gt;/etc/dovecot/conf.d/90-plugin.conf&lt;/code&gt; so it looks like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;plugin&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;sieve_plugins&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sieve_imapsieve&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sieve_extprograms&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Moving to Spam
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spam&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_causes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_before&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;/usr/local/lib/dovecot/sieve/report-spam.sieve
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Moving from Spam
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_from&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spam&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_causes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;imapsieve_mailbox&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;_before&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;/usr/local/lib/dovecot/sieve/report-ham.sieve
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;sieve_pipe_bin_dir&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /usr/local/lib/dovecot/sieve
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;sieve_global_extensions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vnd.dovecot.pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vnd.dovecot.environment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration allows sieve to &amp;ldquo;learn&amp;rdquo; what types of emails are spam and
what types of messages are not spam (sometimes called &amp;ldquo;ham&amp;rdquo; ð) depending on
where you move them. In order to make these filters functional we need to create
two sieve scripts. The first one is
&lt;code&gt;/usr/local/lib/dovecot/sieve/report-spam.sieve&lt;/code&gt;. Let&amp;rsquo;s create it and add the
following to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sieve&#34; data-lang=&#34;sieve&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;require&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vnd.dovecot.pipe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imapsieve&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;environment&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:matches&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imap.user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${1}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:copy&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa-learn-spam.sh&amp;#34;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${username}&amp;#34;&lt;/span&gt; ];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second filter is &lt;code&gt;/usr/local/lib/dovecot/sieve/report-ham.sieve&lt;/code&gt; and should
look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sieve&#34; data-lang=&#34;sieve&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;require&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vnd.dovecot.pipe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imapsieve&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;environment&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:matches&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imap.mailbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mailbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${1}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${mailbox}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trash&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	stop;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;if &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;environment&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:matches&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imap.user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${1}&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:copy&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa-learn-ham.sh&amp;#34;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${username}&amp;#34;&lt;/span&gt; ];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will create two shell scripts for these filters. The first one is
&lt;code&gt;/usr/local/lib/dovecot/sieve/sa-learn-ham.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;exec /usr/local/bin/rspamc -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; learn_ham
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second one is &lt;code&gt;/usr/local/lib/dovecot/sieve/sa-learn-spam.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;exec /usr/local/bin/rspamc -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; learn_spam
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we need to make them executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas chmod +x /usr/local/lib/dovecot/sieve/sa-learn-spam.sh /usr/local/lib/dovecot/sieve/sa-learn-ham.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to compile the sieve filters to actually use them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas sievec /usr/local/lib/dovecot/sieve/report-spam.sieve
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas sievec /usr/local/lib/dovecot/sieve/report-ham.sieve
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, let&amp;rsquo;s enable and start &lt;code&gt;dovecot&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl enable dovecot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl start dovecot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;done&#34;&gt;Done!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Congrats!&lt;/strong&gt; You now have your own email server running on OpenBSD! You can now
login to your email server using your preferred email client. If you don&amp;rsquo;t have
a preferred email client then you can use &lt;a href=&#34;https://thunderbird.net&#34;&gt;Thunderbird&lt;/a&gt;
if you want a GUI or &lt;a href=&#34;https://aerc-mail.org/&#34;&gt;aerc&lt;/a&gt; if you want to view emails
from the terminal.&lt;/p&gt;
&lt;p&gt;You can now enjoy using email knowing that your inbox won&amp;rsquo;t be monitored. ð&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Just a friendly reminder to change &amp;ldquo;example.com&amp;rdquo; to your specific domain
name.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>OpenBSD Server: httpd</title>
			<link>https://brycev.com/blog/openbsd-httpd/</link>
			<pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/openbsd-httpd/</guid>
			<description>&lt;p&gt;I finally got around to writing part 2 of this series. If you have not read part
1 yet, then you can find it &lt;a href=&#34;https://brycev.com/blog/openbsd-server-install&#34;&gt;here&lt;/a&gt;. So now that we
have our base server installed, we can go ahead and setup &lt;code&gt;httpd&lt;/code&gt; to serve our
website.&lt;/p&gt;
&lt;h2 id=&#34;setup-httpd&#34;&gt;Setup httpd&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go ahead and create a very simple http server using &lt;code&gt;httpd&lt;/code&gt; just to make
sure that everything is working properly. We can make a config file for &lt;code&gt;httpd&lt;/code&gt;
at &lt;code&gt;/etc/httpd.conf&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/htdocs/example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;types&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/misc/mime.types&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a web server for &amp;ldquo;example.com&amp;rdquo; (make sure to replace
&amp;ldquo;example.com&amp;rdquo; with your domain name) on port 80 and will redirect traffic from
&amp;ldquo;&lt;a href=&#34;https://www.example.com&#34;&gt;www.example.com&lt;/a&gt;&amp;rdquo; to &amp;ldquo;example.com&amp;rdquo;. Next we need to create
&lt;code&gt;/var/www/htdocs/example.com&lt;/code&gt; to host our files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /var/www/htdocs/example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s just put a very basic webpage at &lt;code&gt;/var/www/htdocs/example.com/index.html&lt;/code&gt;
to serve as our homepage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Example webpage&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;This is an example webpage&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Looks like it works!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, in order to make sure that our httpd config file is correct and does not
have any errors, we can run this command to check it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas httpd -n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your configuration is correct, then it will spit out &lt;code&gt;configuration ok&lt;/code&gt; and
you can move on. If not, then it will spit out what error you have to fix in the
&lt;code&gt;/etc/httpd.conf&lt;/code&gt; file. Finally we can enable httpd on boot and start it using
the &lt;code&gt;rcctl&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl enable httpd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas rcctl start httpd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Congrats!&lt;/strong&gt; You now have a web page on the internet at &amp;ldquo;example.com&amp;rdquo;!&lt;/p&gt;
&lt;h2 id=&#34;getting-a-certificate&#34;&gt;Getting a certificate&lt;/h2&gt;
&lt;p&gt;Now that we verified that a normal web server works, we can go ahead and setup
ACME in order to obtain a certificate in order to allow HTTPS connects to our
website. First we need to create a file named &lt;code&gt;/etc/acme-client.conf&lt;/code&gt; and add
this to our file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;authority&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;letsencrypt&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://acme-v02.api.letsencrypt.org/directory&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;account&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/acme/letsencrypt-privkey.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;example.com&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# Allows an alias
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;alternative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;names&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;www.example.com&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/private/example.com.key&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;full&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;certificate&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/example.com.fullchain.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;sign&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;letsencrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first section defines Let&amp;rsquo;s Encrypt as our certificate authority. The
second section defines a domain to fetch a certificate for. It will place our
domain key at &lt;code&gt;/etc/ssl/private/example.com.key&lt;/code&gt; and our certificate at
&lt;code&gt;/etc/ssl/example.com.fullchain.pem&lt;/code&gt; (remember to replace &amp;ldquo;example.com&amp;rdquo; with
your domain).&lt;/p&gt;
&lt;p&gt;Now we have to edit &lt;code&gt;/etc/httpd.conf&lt;/code&gt; in order to ACME to generate a certificate
for our domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/htdocs/example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/.well-known/acme-challenge/*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;strip&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/acme&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;types&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/misc/mime.types&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run this command in order to generate a certificate for our domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acme-client -v example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setup-https&#34;&gt;Setup HTTPS&lt;/h2&gt;
&lt;p&gt;Now that we have our certificate, let&amp;rsquo;s go ahead and edit our &lt;code&gt;/etc/httpd.conf&lt;/code&gt;
file in order to use HTTPS for our web server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lighty&#34; data-lang=&#34;lighty&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/htdocs/example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;certificate&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/example.com.fullchain.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/ssl/private/example.com.key&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/.well-known/acme-challenge/*&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;strip&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/acme&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com$REQUEST_URI&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;types&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/misc/mime.types&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we can restart &lt;code&gt;httpd&lt;/code&gt; and go to &amp;ldquo;example.com&amp;rdquo; and we will have a secure
connection to the website.&lt;/p&gt;
&lt;h2 id=&#34;automatically-renew-certificates&#34;&gt;Automatically renew certificates&lt;/h2&gt;
&lt;p&gt;The final part of this post is going to take care of lose ends by automatically
renewing our certificate before it expires. Most certificates expire after only
a few months, so we want to automatically renew them. In order to do so we can
make a new file at &lt;code&gt;/etc/weekly.local&lt;/code&gt;. Any commands that we put in this file
will run once a week, so lets put this in &lt;code&gt;/etc/weekly.local&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check for new certificates every week&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;acme-client -v example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rcctl restart httpd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;almost-done&#34;&gt;Almost Done&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s the end of part 2.
The final part of this 3 part series will be about setting up an email server
using &lt;code&gt;smtpd&lt;/code&gt; and setting up spam filtering (as well as other things). So stay
tuned for part 3.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can now read part 3 of this series &lt;a href=&#34;https://brycev.com/blog/openbsd-smtpd&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
</description>
		</item>
		
		<item>
			<title>OpenBSD Server: Initial Setup</title>
			<link>https://brycev.com/blog/openbsd-server-install/</link>
			<pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/openbsd-server-install/</guid>
			<description>&lt;p&gt;&lt;em&gt;This is the first part in a series of posts. Find &lt;a href=&#34;https://brycev.com/blog/openbsd-httpd&#34;&gt;part 2&lt;/a&gt;
and &lt;a href=&#34;https://brycev.com/blog/openbsd-smtpd&#34;&gt;part 3&lt;/a&gt; when they are ready&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For those of you who don&amp;rsquo;t follow my blog, in my
&lt;a href=&#34;https://brycev.com/blog/migrating-my-vps&#34;&gt;previous blog post&lt;/a&gt; I talked about migrating my VPS to
use OpenBSD instead of Debian stable. I recently finished migrating my VPS and
would like to document the process in order to help anyone setting up their own
OpenBSD server or VPS.&lt;/p&gt;
&lt;p&gt;Before we get started, make sure that you have your DNS records for your domain
name pointing to your server IP address.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/openbsd.webp&#34; title=&#34;OpenBASED&#34; alt=&#34;OpenBSD logo&#34;&gt;&lt;/figure&gt;

&lt;h2 id=&#34;installing-openbsd&#34;&gt;Installing OpenBSD&lt;/h2&gt;
&lt;p&gt;One thing that might stop most people from using OpenBSD on a VPS specifically
is the fact that most hosting providers &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; allow you to custom
operating systems besides the ones that they offer. Luckily, my VPS provider
&lt;a href=&#34;https://my.frantech.ca/aff.php?aff=6418&#34;&gt;Frantech&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, allows me to upload my
own ISO images in order for you to install &lt;strong&gt;any&lt;/strong&gt; OS that I like. So make sure
that your VPS provider actually allows you to run OpenBSD.&lt;/p&gt;
&lt;p&gt;Go ahead and install OpenBSD normally. Here are a few tips when installing
OpenBSD for a server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to start &lt;code&gt;sshd&lt;/code&gt; by default (otherwise you can&amp;rsquo;t login)&lt;/li&gt;
&lt;li&gt;Create a user for your system&lt;/li&gt;
&lt;li&gt;Make sure you allow root ssh login (we&amp;rsquo;ll need it temporarily)&lt;/li&gt;
&lt;li&gt;You can delete the &lt;code&gt;swap&lt;/code&gt;, &lt;code&gt;/usr/X11R6&lt;/code&gt;, &lt;code&gt;/usr/src/&lt;/code&gt;, and &lt;code&gt;/usr/obj&lt;/code&gt;
partitions when partitioning your disk as we don&amp;rsquo;t need them (make sure to use
that free space though)&lt;/li&gt;
&lt;li&gt;Make sure you select to install &lt;strong&gt;all&lt;/strong&gt; sets unless you know what you&amp;rsquo;re
doing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Congrats!&lt;/strong&gt; You now have a basic OpenBSD installation.&lt;/p&gt;
&lt;h2 id=&#34;configuring&#34;&gt;Configuring&lt;/h2&gt;
&lt;p&gt;First thing is first, we need root privileges. So run this in order to connect
as the root user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;example.com&lt;/code&gt; is your domain name. As the root user we need to create the
&lt;code&gt;/etc/doas.conf&lt;/code&gt; file and add the wheel group to it. We can do so by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;permit persist :wheel&amp;#34;&lt;/span&gt; &amp;gt; /etc/doas.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now exit our current ssh session in order to login as the user we created
when we installed OpenBSD.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first update our system by running these commands using &lt;code&gt;doas&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas syspatch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doas pkg_add -Uu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;syspatch&lt;/code&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; command applies any necessary patches to your system and &lt;code&gt;pkg_add -Uu&lt;/code&gt; just updates packages. Speaking of adding packages, you can use &lt;code&gt;pkg_add&lt;/code&gt;
in order to install your favorite text editor (you&amp;rsquo;ll need it).
While we are at it, let&amp;rsquo;s go ahead and disable ssh
logins for root since we don&amp;rsquo;t need it anymore. Edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; and
add this line to it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, let&amp;rsquo;s create the file &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; that will contain system-wide
settings. We will put this in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kern.maxproc=8192
kern.maxfiles=32768
kern.maxthread=16384
kern.shminfo.shmall=536870912
kern.shminfo.shmmax=2147483647
kern.shminfo.shmmni=4096
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please note that these settings are for &lt;strong&gt;my&lt;/strong&gt; system and will chage from system
to system. As a rule of thumb:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kern.shminfo.shmmax&lt;/code&gt; should be set to &lt;strong&gt;half&lt;/strong&gt; of your maximum RAM (in bytes)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kern.shminfo.shmall&lt;/code&gt; should be set to &lt;code&gt;kern.shminfo.shmmax&lt;/code&gt; divided by 4096
(4096 is the page size in OpenBSD).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just a few settings that will get a bit more performance out of our
OpenBSD system. It just increases the maximum number of processes able to run at
once as well as the maximum amount of shared memory.
You can find a detailed explanation of these settings by looking
at the man page for &lt;code&gt;sysctl&lt;/code&gt; (hint: run &lt;code&gt;man 2 sysctl&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;stay-tuned&#34;&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s just the beginning of setting up an OpenBSD server, but keep a close eye
on my blog as I will upload the next part of this guide somewhat soon which will
be about setting up a static web server using &lt;code&gt;httpd&lt;/code&gt;&amp;hellip;assuming that I get
around to writing it eventually.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can now read part 2 of this series &lt;a href=&#34;https://brycev.com/blog/openbsd-httpd&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This is an affiliate link&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Make sure to reboot whenever &lt;code&gt;syspatch&lt;/code&gt; applies patches in order to reload
the OpenBSD kernel.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Migrating My VPS</title>
			<link>https://brycev.com/blog/migrating-my-vps/</link>
			<pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/migrating-my-vps/</guid>
			<description>&lt;p&gt;Please note that on February 11, 2025 I will be migrating my VPS to a
different operating system. This means that my website, email, and XMPP server
will be down for most of the day. If you need to contact me please wait until
Feburary 12, 2025.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using Debian stable on my VPS ever since I
wrote my &lt;a href=&#34;https://brycev.com/blog/i-finally-have-a-vps&#34;&gt;original post&lt;/a&gt; about getting a VPS,
however I have decided that I would like to use
&lt;a href=&#34;https://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; on my VPS instead. OpenBSD offers more
security while still being very simple which fits my needs a lot more for a
server operating system when compared to Debian stable.&lt;/p&gt;
&lt;p&gt;After migrating my system, I&amp;rsquo;ll most likely create a guide on how to setup an
OpenBSD system as it&amp;rsquo;s pretty easy, but not a well documented process.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>First Livestream Soon</title>
			<link>https://brycev.com/blog/first-livestream-soon/</link>
			<pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/first-livestream-soon/</guid>
			<description>&lt;p&gt;I&amp;rsquo;ve recently decided that I&amp;rsquo;m going to do a livestream. This livestream is
mostly just a test, but feel free to stop on by if you want to.
I have no idea what to expect&amp;hellip;so I&amp;rsquo;ll see how this goes.
The stream will start on August 7 at 5:30 PM (EST).&lt;/p&gt;
&lt;p&gt;The link is here:
&lt;a href=&#34;https://www.youtube.com/watch?v=y5eZXwXIrBI&#34;&gt;https://www.youtube.com/watch?v=y5eZXwXIrBI&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Microwave Transformers</title>
			<link>https://brycev.com/blog/microwave-transformers/</link>
			<pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/microwave-transformers/</guid>
			<description>&lt;p&gt;A few years ago I was (and I still am) interested in electrical engineering
and learning about how electricity works. I built circuits and repaired
various different electronic devices around my house that were broken.
My favorite part however, was working with high voltage. The cheapest and
most effective gateway drug into high voltage that I encountered was actually
the humble microwave oven.&lt;/p&gt;
&lt;h2 id=&#34;the-guts-of-a-microwave-oven&#34;&gt;The Guts of a Microwave Oven&lt;/h2&gt;
&lt;p&gt;Believe it or not, microwave ovens are actually deceptively simple. It really
consists of 3 main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The control panel&lt;/li&gt;
&lt;li&gt;The magnetron&lt;/li&gt;
&lt;li&gt;The high voltage transformer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The control panel is pretty self explanatory, it lets the
user input the time into the microwave oven, change settings, and etc.
In fact, a control panel isn&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; necessary, all that the control
panel does is turn the transformer on and off, which could potentially be
done manually.
The magnetron is the part that actually generates the microwave radiation
needed to cook your food. The high voltage transformer is what provides the
necessary power for the magnetron to actually work. The transformer is what
we will be focusing on.&lt;/p&gt;
&lt;h2 id=&#34;the-transformer&#34;&gt;The Transformer&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re unfamiliar with transformers and how they work, I would recommend
learning a bit about them &lt;a href=&#34;http://hyperphysics.phy-astr.gsu.edu/hbase/magnetic/transf.html&#34;&gt;here&lt;/a&gt;.
Otherwise, let&amp;rsquo;s continue.&lt;/p&gt;
&lt;p&gt;The transformer within a microwave oven is very special. Most high voltage
transformers that you can easily get a hold of are very&amp;hellip;limited. Usually
these transformers output a high voltage (around 5,000 volts max), but have at
a pretty low current (less than 5 milliamps). While this can potentially hurt
you and leave burns, it is usually not enough to kill you. Microwave oven
transformers are &lt;strong&gt;very&lt;/strong&gt; different.&lt;/p&gt;
&lt;p&gt;While microwave oven transformers are pretty easy to get a hold of, they can
output a &lt;strong&gt;scary&lt;/strong&gt; amount of power. The average microwave oven transformer can
output anywhere from 2,000 to 4,000 volts at around &lt;strong&gt;500 milliamps&lt;/strong&gt; (or 0.5
amps). That&amp;rsquo;s around &lt;strong&gt;1-2 thousand watts&lt;/strong&gt; of power!&lt;/p&gt;
&lt;h2 id=&#34;some-fun&#34;&gt;Some Fun&lt;/h2&gt;
&lt;p&gt;With high voltage like this, you can do some really cool stuff.
But first, a disclaimer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This should go without saying, but do &lt;strong&gt;NOT&lt;/strong&gt; work with microwave ovens and
microwave oven transformers unless you know 100% what you are doing!
These things can &lt;em&gt;easily&lt;/em&gt; kill you.&lt;/p&gt;
&lt;p&gt;Human skin is usually 100 killoohms, this means that if you touch even a
2,000 volt microwave transformer, then you could have at &lt;em&gt;least&lt;/em&gt; 20
milliamps flow through your body&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This is enough current to seize your
muscles so you can&amp;rsquo;t let go. ð&lt;/p&gt;
&lt;p&gt;I am &lt;strong&gt;NOT&lt;/strong&gt; responsible for anything stupid that you do.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is the transformer that I pulled out of a microwave oven. Like most
transformers there&amp;rsquo;s two coils, the primary and the secondary&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
These are illustrated below:&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/transformer.webp&#34; alt=&#34;Mircowave Transformer&#34;&gt;&lt;/figure&gt;

&lt;p&gt;By hooking up the primary side of the transformer to 120 volts AC (a.k.a.
Mains electricity) and attaching wires to the secondary side, I was able to get
some pretty cool arcs. I achieved this by bridging the gap between the
secondary side with a nail. This setup is called a
&lt;a href=&#34;https://teslauniverse.com/build/plans/jacobs-ladder&#34;&gt;Jacob&amp;rsquo;s Ladder&lt;/a&gt;.&lt;/p&gt;
&lt;video width=&#34;640&#34; height=&#34;480&#34; preload=&#34;none&#34; controls&gt;
	&lt;source src=&#34;https://brycev.com/ac-arcs.webm&#34; type=&#34;video/webm&#34;&gt;
&lt;/video&gt;

&lt;p&gt;We can do better. We can build a self-sustaining (non-manual) Jacob&amp;rsquo;s
Ladder&amp;hellip;but how?&lt;/p&gt;
&lt;h2 id=&#34;more-power&#34;&gt;More Power&lt;/h2&gt;
&lt;p&gt;In order to create a self-sustaining and self-starting Jacob&amp;rsquo;s Ladder I needed
more power. But how exactly can we add more power to this circuit? One
microwave oven transformer already draws a lot of power, but how about &lt;strong&gt;two&lt;/strong&gt;
microwave oven transformers? That&amp;rsquo;s right, I got a hold of &lt;em&gt;another&lt;/em&gt; microwave
oven transformer.&lt;/p&gt;
&lt;p&gt;Careful consideration is needed in order to hook up two of these microwave oven
transformers. I wired the two transformers in series with a &amp;ldquo;center tap&amp;rdquo; going
straight to ground (otherwise my breaker would trip). This gives me anywhere
from 4,000 volts to 8,000 volts AC. Next I need to turn that AC voltage into
DC voltage.&lt;/p&gt;
&lt;p&gt;Sadly, I did not have enough high voltage components to make a &lt;em&gt;true&lt;/em&gt; AC to
DC conversion system&amp;hellip;but I hobbled one together anyways. I was able to
use two microwave oven capacitors as resistors&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; since I didn&amp;rsquo;t have any
high power resistors on hand. In order to turn AC into &amp;ldquo;DC&amp;rdquo; I took and very
simple [but stupid] approach. During the negative AC cycle, all the current
is dumped into a pair of diodes&amp;hellip;that&amp;rsquo;s it. Does it waste a &lt;strong&gt;lot&lt;/strong&gt; of power?
Yes. But does it work? &lt;strong&gt;Yes&lt;/strong&gt;. I made a schematic below in order to better
illustrate the circuit.&lt;/p&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/circuit.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/circuit.webp&#34; alt=&#34;Jacob&amp;#39;s Ladder circuit&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;And here is the final product. A &lt;strong&gt;working&lt;/strong&gt; Jacob&amp;rsquo;s Ladder!&lt;/p&gt;
&lt;video width=&#34;640&#34; height=&#34;480&#34; preload=&#34;none&#34; controls&gt;
	&lt;source src=&#34;https://brycev.com/dc-arcs.webm&#34; type=&#34;video/webm&#34;&gt;
&lt;/video&gt;

&lt;p&gt;I&amp;rsquo;m not sure if you noticed in that video, but my breaker popped. This circuit
just draws too much power. I could improve this circuit, but I think I&amp;rsquo;ve
decided to end my project here.
That being said, I think this was enough high
voltage fun for one day. :)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;These are actually very conservative estimates. In reality, much more
current is likely to flow through your body&amp;hellip;which would kill you even faster.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Most microwave oven transformers actually have a third coil (see the
image).
This coil usually generates a very low voltage with a high current capability.
This is used to heat the magnetron filament, however we are not concerned with
it.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;For those who don&amp;rsquo;t know, capacitors behave similar to resistors when
passing AC current through them due to
&lt;a href=&#34;http://hyperphysics.phy-astr.gsu.edu/hbase/electric/accap.html#c2&#34;&gt;capacitive reactance&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>My Conversion</title>
			<link>https://brycev.com/blog/my-conversion/</link>
			<pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/my-conversion/</guid>
			<description>&lt;p&gt;I&amp;rsquo;ve been putting off writing this blog post for 2 (almost 3) years now.
There &lt;strong&gt;is&lt;/strong&gt; a good reason for why I did that. Part of it was that I didn&amp;rsquo;t
know how to put my experience into words until now, and the other part
was just procrastination. So now I feel like I finally have the experience
and knowledge to write about something that is very important to me.&lt;/p&gt;
&lt;h2 id=&#34;a-bit-of-background&#34;&gt;A Bit of Background&lt;/h2&gt;
&lt;p&gt;In the past I have never really been a religious person, nor have I really
ever liked religion. I always either found it silly, meaningless, or something
between those two. In high school I was something akin to Agnostic, I didn&amp;rsquo;t
fully believe in God, but I wasn&amp;rsquo;t really sure.
In middle school I was a proud Atheist who had a smug
satisfaction &amp;ldquo;knowing&amp;rdquo; that God did not exist. So take my word when I say the
events within the past few years of my life completely took me by surprise.&lt;/p&gt;
&lt;h2 id=&#34;i-am-now-a-roman-catholic&#34;&gt;I Am Now A Roman Catholic&lt;/h2&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/augustine.webp&#34; title=&#34;Based Saint Augustine of Hippo&#34; alt=&#34;Saint Augustine of Hippo&#34;&gt;&lt;/figure&gt;

&lt;p&gt;Ok, &lt;em&gt;technically&lt;/em&gt; I&amp;rsquo;ve been a Catholic for the last 2-3 years and I got
confirmed last year, but I&amp;rsquo;ve been
putting off &amp;ldquo;officially&amp;rdquo; saying anything until now. I was actually considering
Catholicism when I originally started this blog all the way back in November of
2021 (my &lt;a href=&#34;https://brycevandegrift.xyz/blog/new-blog/&#34;&gt;first blog post&lt;/a&gt;), but I
didn&amp;rsquo;t start taking it seriously until sometime in 2022.
For me, it seemed like it all happened very quickly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;But did you consider religion &lt;em&gt;xyz&lt;/em&gt;?&amp;rdquo;
&amp;ndash;Probably Someone&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I actually did consider quite a few. I considered different forms of
Christianity like Anglicanism, Orthodoxy, and even Baptist&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. I even
considered things like Islam, Buddhism, and even Hinduism briefly. However, I
never found a intellectual tradition that truly rivaled Catholic tradition&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
I also personally looked for the religion that I thought was 100% &lt;strong&gt;true&lt;/strong&gt; and
Catholicism seemed to fit that bill.
It should go without saying, but
basing your religious decisions on anything else besides truth (like personal
preference) is a very small brained move.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t really have a bias either. I used to &lt;strong&gt;hate&lt;/strong&gt; the Catholic Church, but
I soon grew to find out that my hatred was &lt;em&gt;very&lt;/em&gt; much misplaced. As Venerable
Archbishop Fulton Sheen put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Not 100 people in the United States hate the Roman Catholic Church, but
millions hate what they think the Roman Catholic Church is.&amp;rdquo; &amp;ndash;Archbishop
Fulton J. Sheen&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This very much encapsulates the essence of what stopped me from converting to
Catholicism in the past. I hated what I &lt;em&gt;thought&lt;/em&gt; Catholicism was, but I soon
came to love what it &lt;em&gt;actually&lt;/em&gt; is.&lt;/p&gt;
&lt;h2 id=&#34;joining-a-webring&#34;&gt;Joining a Webring&lt;/h2&gt;
&lt;p&gt;After being invited to the &lt;a href=&#34;https://heaventree.xyz&#34;&gt;Heaven Tree&lt;/a&gt; webring almost
a year ago, I decided to accept the invitation last month. Now I didn&amp;rsquo;t wait a
year to accept the invitation just to be rude. I waited quite a while because I
was not sure if I really wanted to identify as a Catholic or even as a Christian
for that matter. It really took me the last year to solidify my identity as a
Catholic and to accept it. So I sort of think that joining this webring is
me cementing myself as a Catholic.&lt;/p&gt;
&lt;h2 id=&#34;what-now&#34;&gt;What Now?&lt;/h2&gt;
&lt;p&gt;Not much about my blog or YouTube channel will change&amp;hellip;at least in the short
term. I might post more stuff about theology or other topics related to it, but
as always I don&amp;rsquo;t really have a specific direction for my blog or channel. I
just post about whatever I feel like saying and that&amp;rsquo;s the way it will probably
always be. So don&amp;rsquo;t be surprised if things change over time.&lt;/p&gt;
&lt;p&gt;I am very grateful for my conversion and all that it has brought me. DEO GRATIAS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Late have I loved you, Beauty so ancient and so new, late have I loved you!&lt;/p&gt;
&lt;p&gt;Lo, you were within,
but I outside, seeking there for you,
and upon the shapely things you have made
I rushed headlong â I, misshapen.
You were with me, but I was not with you.
They held me back far from you,
those things which would have no being,
were they not in you.&lt;/p&gt;
&lt;p&gt;You called, shouted, broke through my deafness;
you flared, blazed, banished my blindness;
you lavished your fragrance, I gasped; and now I pant for you;
I tasted you, and now I hunger and thirst;
you touched me, and I burned for your peace.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ndash;Saint Augustine of Hippo&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The only reason I even &lt;strong&gt;remotely&lt;/strong&gt; considered Baptist was due to their
incredible zeal. Baptist theology is extremely deficient and almost
non-sensical.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I mean, have you even looked at the Summa Theologica?&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Using a Dot Matrix Printer in 2024</title>
			<link>https://brycev.com/blog/using-a-dot-matrix-printer-in-2024/</link>
			<pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/using-a-dot-matrix-printer-in-2024/</guid>
			<description>&lt;p&gt;Modern printers suck. They&amp;rsquo;re either overpriced, unreliable, ink/toner hogs,
or a combination of all 3.&lt;/p&gt;
&lt;p&gt;Inkjet printers are cheap, have a good picture quality, and can print on
many surfaces. However, they are also &lt;strong&gt;very&lt;/strong&gt; unreliable and usually don&amp;rsquo;t
last over 3 years. Not only that but inkjet printer cartridges can cost
and arm and a leg, which is dumb considering ink (outside the cartridge)
is dirt cheap. Inkwell printers do solve the ink issue by having an ink
reservoir which means that you are not trapped into buying DRM infested
ink cartridges.&lt;/p&gt;
&lt;p&gt;Laser printers are reliable, have a &lt;strong&gt;great&lt;/strong&gt; picture quality, and are
usually more serviceable. However, they are often &lt;strong&gt;very&lt;/strong&gt; large and
sometimes overly complicated. Just like with inkjet printers, laser printer
toner is insanely expensive and can cost anywhere from $60-$140 per cartridge.
It doesn&amp;rsquo;t help that
[good] laser printers themselves are also very expensive, costing anywhere
from $500-$2,000.&lt;/p&gt;
&lt;p&gt;Both laser and inkjet printers also suffer from having &amp;ldquo;internet&amp;rdquo; connectivity
put on them. I&amp;rsquo;m not talking about a simple LAN connection, I&amp;rsquo;m talking
about having your printer connected to Hewlett Packard&amp;rsquo;s, Canon&amp;rsquo;s, or
Epson&amp;rsquo;s servers over the internet. Obviously, I&amp;rsquo;m not a big fan of having
my printer being able to relay information to anywhere outside my house
without my permission.&lt;/p&gt;
&lt;p&gt;So, what are we left with after laser and inkjet printers. Well, there are
thermal printers which are really cheap, require no ink/toner, and can print
quickly. However, they require special paper, the prints are usually not high
quality, and since a thermal printer &lt;em&gt;burns&lt;/em&gt; the image onto paper, the image
wears off the paper after a year or so. You also can&amp;rsquo;t print in color.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I guess that means we are left with&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;dot-matrix-printers&#34;&gt;Dot Matrix Printers&lt;/h2&gt;
&lt;p&gt;Dot matrix printers are relatively cheap, usually costing no more than
$500. They&amp;rsquo;re also simple since a dot matrix printer&amp;rsquo;s method of printing is
relatively straight forward (I&amp;rsquo;ll explain how they work in a moment). Since
they&amp;rsquo;re simple, that also means that they&amp;rsquo;re also &lt;strong&gt;very&lt;/strong&gt; reliable and easy
to service. Dot matrix ink ribbons are also cheap compared to inkjet ink
and laser printer toner. There are also color options for dot matrix printers.
The only real apparent downside of dot matrix printers is speed as it usually
takes a while to print compared to other printers.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-they-work&#34;&gt;How They Work&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re not familiar with how dot matrix printers work, you would be
surprised by how simple they are. A dot matrix printer, as the name implies,
prints in a matrix of dots. As the print head moves from left to right, it
presses the ink onto the paper via a series of tiny pins that create the
final image. It does this line by line until the entire picture is printed.
If you want to see one in action look &lt;a href=&#34;https://youtu.be/A_vXA058EDY&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/dotmatrix.webp&#34; alt=&#34;How a dot matrix printer works&#34;&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, as you can tell from the video, this means that dot matrix printers
are somewhat slow and sometimes loud compared to their contenders.&lt;/p&gt;
&lt;h2 id=&#34;my-not-really-new-printer&#34;&gt;My (Not Really) New Printer&lt;/h2&gt;
&lt;p&gt;About a year or two ago I acquired an Apple ImageWriter II off of eBay for
about $50. It had some wear and tear on it and was &lt;em&gt;severely&lt;/em&gt; yellowed (which
I don&amp;rsquo;t mind) and it was also previously used in an industrial setting. But
despite all of that, it worked great! The only problem it had was that one
of the pins on the print head did not work, which you will see in a moment.
Considering there is only &lt;strong&gt;one&lt;/strong&gt; problem with it after 30 years of industrial
use is amazing and really shows the reliability of these things.&lt;/p&gt;
&lt;p&gt;I planned to use this thing for a while, but I kept on putting it off
for about 1-2 years. It wasn&amp;rsquo;t until the last 2 weeks that I decided to
get this thing working.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/imagewriter.webp&#34; title=&#34;The last good Apple product&#34; alt=&#34;Apple Imagewriter II&#34;&gt;&lt;/figure&gt;

&lt;h2 id=&#34;getting-it-to-work&#34;&gt;Getting It To Work&lt;/h2&gt;
&lt;h3 id=&#34;printing-text&#34;&gt;Printing Text&lt;/h3&gt;
&lt;p&gt;The first problem I encountered was how to even hook this thing up to my
modern computer. My desktop has a 9 pin serial card and the ImageWriter is a
serial printer, so I figured that I should start there. The printer came with a
cable to covert the 8 pin DIN socket on the printer to a 25 pin serial
connector, so I decided to buy a 25 pin to 9 pin null modem serial cable and a
25 pin serial coupler. I hooked it up as followed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                        DB-25 Serial Port
                          |           |
DB-9 Serial Port-------+  |           | +-------DIN 8 Serial Port
                       |  |           | |
                       |  |           | |
         +-----------+ |  | +-------+ | | +---------+
         |           | v  v |       | v v |         |
         | Computer  +-+--+-+Coupler+-+-+-+ Printer |
         |           |      |       |     |         |
         +-----------+      +-------+     +---------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, I had to get access to &lt;code&gt;/dev/ttyS1&lt;/code&gt; which is where my serial port
connected to the printer is located. To do that I just created a simple udev
rule to change the permissions of &lt;code&gt;/dev/ttyS1&lt;/code&gt; on boot.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;KERNEL==&amp;#34;ttyS1&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;, MODE=&amp;#34;0660&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, I had to change the settings of the serial port using &lt;code&gt;stty&lt;/code&gt;.
The settings needed to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;9600 baud rate&lt;/li&gt;
&lt;li&gt;8 character bits&lt;/li&gt;
&lt;li&gt;1 stop bit&lt;/li&gt;
&lt;li&gt;No parity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in order to set them accordingly I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stty -F /dev/ttyS1 &lt;span style=&#34;color:#ae81ff&#34;&gt;9600&lt;/span&gt; cs8 -cstopb -parenb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, I sent some data to test the printer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a test&amp;#34;&lt;/span&gt; &amp;gt; /dev/ttyS1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And&amp;hellip;&lt;strong&gt;it worked!&lt;/strong&gt;&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/testprint.webp&#34; alt=&#34;It works&#34;&gt;&lt;figcaption&gt;Success!&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h3 id=&#34;printing-pdfs&#34;&gt;Printing PDFs&lt;/h3&gt;
&lt;p&gt;Printing text from a modern computer onto a 30 year old printer is pretty
cool, but I wanted to see how well it could print PDFs. I actually planned
to write a program to translate a PDF to a format that I could output to
the ImageWriter, needless to say, this would take a while. Luckily, I found
out that &lt;a href=&#34;https://www.ghostscript.com/&#34;&gt;Ghostscript&lt;/a&gt; actually supports output
to the Apple ImageWriter family. Four drivers where available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appledmp (Generic Apple dot matrix driver)&lt;/li&gt;
&lt;li&gt;iwlo (Apple ImageWriter)&lt;/li&gt;
&lt;li&gt;iwhi (Apple ImageWriter II)&lt;/li&gt;
&lt;li&gt;iwlq (Apple ImageWriter LQ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I choose &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png&#34;&gt;this&lt;/a&gt;
as my test image.&lt;/p&gt;
&lt;p&gt;In order to create a file that I could send to the printer I needed to
first convert the PNG into a PDF file with ImageMagick, run Ghostscript,
and then output it to the printer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;convert Tux.png Tux.pdf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gs -q -dBATCH -dNOPAUSE -sDEVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iwhi -sPAPERSIZE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;letter -dFIXEDMEDIA -dPSFitPage -r160x144 -sOutputFile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tux Tux.pdf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat tux &amp;gt; /dev/ttyS1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output from the printer was&amp;hellip;&lt;em&gt;interesting&lt;/em&gt;.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/tuxtest.webp&#34; alt=&#34;Failed print&#34;&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;Side note, you can see the visible lines that go across the print. That is
actually the broken pin on the print head, I plan on replacing the print
head eventually.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This was good and bad. Good because graphics printing works.
Bad because I had no idea what was causing this image to corrupt.
At this point I had no idea what was wrong. I assumed the problem was that
the Ghostscript driver was faulty, however I tried all 4 Apple ImageWriter
drivers and they all had a similar result. At one point I thought the serial
connection was bad, but these errors were too consistent to be a connection
issue. I looked at the
&lt;a href=&#34;https://mirrors.apple2.org.za/ftp.apple.asimov.net/documentation/hardware/printers/Apple%20ImageWriter%20II%20Technical%20Reference%20Manual.pdf&#34;&gt;Apple ImageWriter II Technical Reference Manual&lt;/a&gt;
and that&amp;rsquo;s when I found the problem.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;a-side-note-about-printers&#34;&gt;A Side Note About Printers&lt;/h4&gt;
&lt;p&gt;One thing that I was ignorant about when it came to printers is that
almost every printer has a &lt;strong&gt;buffer&lt;/strong&gt;. The buffer stores data for the current
print job (sometimes future print jobs as well), feeds it to the printer
once it needs to print that data, and then disposes of that data once it
has been printed. Most modern printers have a decent buffer size to hold
print data. Most printing software keeps track of how much data
is sent to the printer buffer. This means that we never really have to worry
about prints being messed up since print buffers are automatically managed
for us.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Once I read that the Apple ImageWriter II only has a print buffer size of
&lt;strong&gt;2 kilobytes&lt;/strong&gt; I knew what the problem was.&lt;/p&gt;
&lt;p&gt;The problem about sending data at 9600 baud to the printer was that it was
sending data at a faster rate than the printer could actually print, which was
overwriting data in the buffer which caused it to print garbage. In order
to remedy this I did something no man has ever done&amp;hellip;&lt;em&gt;lower&lt;/em&gt; the baud rate.&lt;/p&gt;
&lt;p&gt;Once I set the baud rate on the printer and my computer&amp;rsquo;s serial port to
2400 baud and printed the image, I got this:&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/matrixtux.webp&#34; alt=&#34;Printed image of Tux&#34;&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Success!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a few errors on the right of Tux and a missing line, but that is
just a problem with Ghostscript that I can&amp;rsquo;t fix. It usually does not show
up on most other prints.&lt;/p&gt;
&lt;h3 id=&#34;printing-faster&#34;&gt;Printing Faster&lt;/h3&gt;
&lt;p&gt;The printer works perfectly at 2400 baud and lower.
The only problem is that this printer is now &lt;em&gt;slow&lt;/em&gt;. 2400 baud is
not fast at all! There are pauses during printing where the printer is
waiting to receive serial data from the computer. So how do I increase the
data transfer rate but also limit the data transferred to 2kb? Well, that&amp;rsquo;s
where a program called &lt;code&gt;split&lt;/code&gt; comes in handy. &lt;code&gt;split&lt;/code&gt; is a standard POSIX
utility that is available on &lt;strong&gt;ALL&lt;/strong&gt; POSIX systems. It takes an input file
a splits it into multiple output files, but it also has a &lt;code&gt;-b&lt;/code&gt; option
which allows you to limit the split files to a specific size. In this case,
we can limit the file size to 2kb and send them one at a time at 9600 baud.
All I have to do is run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;split -b 2k tux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we have 67 different 2kb files starting with &amp;ldquo;x&amp;rdquo; that we can send one at a time.
In order to print them one at a time I wrote a script that just loops
over these files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ls -1 x*&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x in $files; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cat $x &amp;gt; /dev/ttyS1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course this is &lt;strong&gt;not&lt;/strong&gt; an efficient way of printing. There are moments
where the printer is waiting for data to be received, but this is good enough.
In order to achieve close to 100% efficiency, you would need to
calculate how fast the print head and page feed move on the host, but
I&amp;rsquo;m &lt;em&gt;way&lt;/em&gt; too lazy to do that.&lt;/p&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;
&lt;p&gt;The result is a printer that is somewhat slow, but gets the job done. All
I need now is to get &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_stationery&#34;&gt;tractor/continuous feed paper&lt;/a&gt; so I don&amp;rsquo;t have to load
paper manually. For me, this printer is definitely a good enough solution
until I get a new printer (if this one even fails).&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;video width=&#34;640&#34; height=&#34;480&#34; preload=&#34;none&#34; controls&gt;
	&lt;source src=&#34;https://brycev.com/print.webm&#34; type=&#34;video/webm&#34;&gt;
&lt;/video&gt;

&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I think there actually &lt;em&gt;are&lt;/em&gt; thermal printers that can print in color
(I have no idea how), but they seem very rare.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Dot matrix printers &lt;em&gt;do&lt;/em&gt; have more downsides like the fact that pins
on the print head can break easily, but since you can replace the print heads
&lt;strong&gt;and&lt;/strong&gt; print heads are relatively cheap this is negligible.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;I&amp;rsquo;ve been keeping my eye on any used Epson dot matrix printers. ð&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Why I Switched to Alpine</title>
			<link>https://brycev.com/blog/why-i-switched-to-alpine/</link>
			<pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/why-i-switched-to-alpine/</guid>
			<description>

&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/alpine.webp&#34; alt=&#34;Alpine Linux logo&#34;&gt;&lt;/figure&gt;

&lt;p&gt;I&amp;rsquo;ve been a &lt;a href=&#34;https://voidlinux.org/&#34;&gt;Void Linux&lt;/a&gt; user for about 2 years and I want to say it has been
a good run. Void Linux has been an absolutely great Linux distribution and
has served me well for quite a while. However, every Linux distribution is not
without it&amp;rsquo;s shortcomings. Although Void Linux is a &lt;strong&gt;great&lt;/strong&gt; distribution,
I still think that it had a few shortcomings that &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; fixes.&lt;/p&gt;
&lt;h2 id=&#34;what-alpine-does-better-than-void&#34;&gt;What Alpine Does Better Than Void&lt;/h2&gt;
&lt;h3 id=&#34;packages&#34;&gt;Packages&lt;/h3&gt;
&lt;p&gt;Although the main Void Linux repositories have more packages than most other
distributions, the selection is still a bit&amp;hellip;lacking. As of writing this,
Void Linux has around 13,369 packages. Which is still &lt;strong&gt;a lot&lt;/strong&gt; of packages,
however Alpine Linux more than &lt;strong&gt;doubles&lt;/strong&gt; Void at around 28,583 packages&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;One thing that bugs me is that even though Void supports musl libc, not all
13,369 packages are available for musl. As you would have guessed, Alpine does
not have this problem since musl is the default.&lt;/p&gt;
&lt;p&gt;Another thing that kind of bugs me is how long it took for packages I
submitted to Void&amp;rsquo;s package repos to get accepted. Some of my requests
were &lt;strong&gt;never&lt;/strong&gt; responded to and others were just forgotten about entirely.
When submitting packages to Alpine&amp;rsquo;s packages repos my requests were almost
answered the same day and 100% of my packages (so far) have been accepted
into the testing branch.&lt;/p&gt;
&lt;h3 id=&#34;xbps&#34;&gt;XBPS&lt;/h3&gt;
&lt;p&gt;Now don&amp;rsquo;t get me wrong, the XBPS package manager is great, however apk
(Alpine&amp;rsquo;s package manager) is superior when compared to XBPS. For example, when updating
my system after a month on Void it would take around 3-4 minutes to update
using XBPS. Whenever I update after a month on Alpine it usually takes
less than a minute!&lt;/p&gt;
&lt;p&gt;A set of packages that show this perfectly are the &lt;code&gt;texlive&lt;/code&gt; packages. The
time it takes to install an entire texlive distribution on disk is
notoriously long. Alpine&amp;rsquo;s apk installs texlive &lt;em&gt;way&lt;/em&gt; faster than XBPS.
Not only that, but apk manages cached packages in a much better way than
XBPS, in my opinion.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think I will ever see a package manager as fast, light, and minimal
as apk.&lt;/p&gt;
&lt;h3 id=&#34;busybox&#34;&gt;BusyBox&lt;/h3&gt;
&lt;p&gt;One thing that keeps Alpine small is instead of using the GNU Coreutils,
Alpine uses the BusyBox Coreutils. For a long time user of the GNU Coreutils
like me, the switch can be very jarring, however the payoff is (in my opinion)
worth it. The BusyBox Coreutils are actually easier to learn since they have
less features and options. They also have the upside of being more POSIX
compliant than the GNU Coreutils so writing scripts with BusyBox usually
results in more portability.&lt;/p&gt;
&lt;h3 id=&#34;musl-musl-musl-&#34;&gt;musl, musl, musl ð&lt;/h3&gt;
&lt;p&gt;Void and Alpine both support musl libc, but a major difference is that Alpine
supports &lt;strong&gt;only&lt;/strong&gt; musl&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. For those of you who are not well versed in C
libraries, musl is essentially a smaller and more tidy C library replacement
for glibc (the GNU C library). As I mentioned above, this means that all
28,583 Alpine packages are compiled for musl.&lt;/p&gt;
&lt;p&gt;For reasons that I won&amp;rsquo;t get into (since it would take too long) musl is
generally better than glibc, but sometimes isn&amp;rsquo;t as compatible as glibc,
you can find out more about that &lt;a href=&#34;https://wiki.musl-libc.org/functional-differences-from-glibc.html&#34;&gt;here&lt;/a&gt;.
I think one of the best comparisons of musl and glibc can be found
&lt;a href=&#34;https://www.etalabs.net/compare_libcs.html&#34;&gt;here&lt;/a&gt;. musl binaries tend to
be smaller, faster, and more portable compared to glibc.&lt;/p&gt;
&lt;p&gt;As a C programmer, working with musl is a &lt;strong&gt;dream&lt;/strong&gt; compared to glibc.&lt;/p&gt;
&lt;h3 id=&#34;its-great-use-it-already&#34;&gt;It&amp;rsquo;s Great, Use It Already&lt;/h3&gt;
&lt;p&gt;Overall, Alpine Linux fixes almost every gripe that I had with Void Linux
and also fixes problems that I didn&amp;rsquo;t even know I had. The entire Alpine
Linux distribution is easy to understand, simple, and fast.
There are many, many
more things that Alpine does better than Void, but if I listed them &lt;em&gt;all&lt;/em&gt;
then it would take forever. But so far, Alpine Linux is probably one of the
&lt;strong&gt;best&lt;/strong&gt; Linux distributions that I have ever used.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;These numbers where obtained by running &lt;code&gt;xbps-query -Rs &amp;quot;*&amp;quot; | wc -l&lt;/code&gt;
and &lt;code&gt;apk search &amp;quot;*&amp;quot; | wc -l&lt;/code&gt; respectively.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Technically Alpine &lt;em&gt;does&lt;/em&gt; support glibc if you wish to install it
through apk.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>FFmpeg Video Calls</title>
			<link>https://brycev.com/blog/ffmpeg-video-calls/</link>
			<pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/ffmpeg-video-calls/</guid>
			<description>&lt;p&gt;If you have seen any of the &lt;a href=&#34;https://youtu.be/VGRHzB8ANAo&#34;&gt;videos I made on&lt;/a&gt;
&lt;a href=&#34;https://youtu.be/4NKmEjzfJ98&#34;&gt;FFmpeg&lt;/a&gt; you would know that I absolutely love
it and I think that it is the absolute &lt;strong&gt;BEST&lt;/strong&gt; video/multimedia program ever
made.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; FFmpeg has so many features and it implements almost all of them
extremely well. So it comes to no surprise, after I initially made my FFmpeg
videos I found out that FFmpeg can actually be used to create video streams and
send them over the internet. After I found out about this I wondered if it
could be used as a sort of minimal way to create video calls. After
experimenting for just a few &lt;em&gt;minutes&lt;/em&gt; I found a way to stream video over the
internet via FFmpeg.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffmpeg -f alsa -i default &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get audio from mic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-i /dev/video0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get video from camera&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-s 640x480 &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Scale down to 640x480&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-c:v libx264 -preset:v ultrafast &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Encode fast!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-tune zerolatency -intra-refresh &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Reduce latency&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-f mpegts &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Put everything into mpegts stream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-b:v 1M udp://localhost:1313 &lt;span style=&#34;color:#75715e&#34;&gt;# Send video over localhost:1313&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to actually view this video you would need a video player that is
able to read/receive from UDP. Luckily such a program exists:
&lt;a href=&#34;https://youtu.be/iR76e9XUodI&#34;&gt;mpv&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mpv --profile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;low-latency udp://localhost:1313
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to actually send this over the internet and not just over LAN or localhost you
would need to replace &lt;code&gt;localhost:1313&lt;/code&gt; with the IP address of the recipient
for FFmpeg and the IP address of the sender for mpv. This is will let
you be able to do peer-to-peer video calls using only FFmpeg and mpv (or any
other UDP compatible video player). FFplay, a media player that comes with
FFmpeg, can play UDP streams, so technically this can be done using &lt;strong&gt;only&lt;/strong&gt;
FFmpeg. If you replace &lt;code&gt;-f /dev/video0&lt;/code&gt; with
&lt;code&gt;-i x11grab&lt;/code&gt; you can also screencast to another computer as well, pretty neat.&lt;/p&gt;
&lt;p&gt;Theoretically, you could do more than just one-on-one video calls, you could
have 4, 7, or even 15 people using this method. It would definitely be tedious
to set it up, but it would be possible. And of course if you don&amp;rsquo;t want to use
video at all you can easily use this method for audio calls.&lt;/p&gt;
&lt;p&gt;I think this example shows just how versatile FFmpeg can be. Not only that
but the settings I used for this example are not actually optimal, it was
just a test but it worked great. This is just the tip of the iceberg too,
you can also use this to stream movies from another computer,
video games, general live streaming, and much more.
I personally
find it crazy that you can basically do audio and video calls using &lt;strong&gt;only&lt;/strong&gt;
FFmpeg and this shows just how absolutely amazing it is.&lt;/p&gt;
&lt;video width=&#34;640&#34; height=&#34;480&#34; preload=&#34;none&#34; controls&gt;
	&lt;source src=&#34;https://brycev.com/cameracast.webm&#34; type=&#34;video/webm&#34;&gt;
&lt;/video&gt;

&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;In fact, the creator of FFmpeg, Fabrice Bellard, also made QEMU and the
Tiny C Compiler (TCC) both of which are very widely used pieces of software
that are very well made.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>A Branded Life</title>
			<link>https://brycev.com/blog/a-branded-life/</link>
			<pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/a-branded-life/</guid>
			<description>&lt;p&gt;Modern &amp;ldquo;brands&amp;rdquo; are a weird thing when you really think about them.
Disney, Hewlett Packard, and Nike. What do all 3 of these have in common?
They&amp;rsquo;re all considered brands. But what exactly is a brand? Before the
industrial age, a brand was just a way to differentiate a product from a
competitor&amp;rsquo;s product. In order to differentiate it one would often &lt;em&gt;brand&lt;/em&gt;
their name or alias in the product itself.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; However, the concept of a
brand has evolved over the last 100-200 years. Instead of being just a
name or logo, a brand is often associated with what people hear
(jingles/slogans), taste, see, and more. How many times have you heard
someone say, &amp;ldquo;Hey, this &lt;strong&gt;X&lt;/strong&gt; is just like &lt;strong&gt;Y&lt;/strong&gt; brand?&amp;rdquo; As a result of this
recognition, modern branding strategies have exploded in popularity. For the
companies that brand their products like this, it creates more customer
loyalty and therefore more money.&lt;/p&gt;
&lt;p&gt;But is branding (in the modern sense) a good thing?&lt;/p&gt;
&lt;h2 id=&#34;everything-is-a-brand&#34;&gt;Everything is a Brand&lt;/h2&gt;
&lt;p&gt;One thing that I tend to find very annoying is the modern obsession of brands
to the point where &lt;strong&gt;everything&lt;/strong&gt; has to be a brand. From homemade crafts to
personal websites, it seems like there are so many attempts at creating a
modern brand that are just not necessary.&lt;/p&gt;
&lt;p&gt;Let me share an experience that I had somewhat recently. I had a friend
buy me a book from a local book shop as a gift. When I received it I thanked
them for the gift and I read it later. I noticed something rather odd
about this book&amp;hellip;there was &lt;strong&gt;no&lt;/strong&gt; branding. &lt;strong&gt;No&lt;/strong&gt; &lt;em&gt;brand name&lt;/em&gt;, &lt;strong&gt;no&lt;/strong&gt; name, and
not even a &lt;strong&gt;copyright notice&lt;/strong&gt;. Needless to say I was taken back by this
as it seemed abnormal. But why did I think it was abnormal? If I had to guess,
it was probably because seeing someone not milking their work and
committing a sort of selfless act seemed out of place, especially in this
day and age.&lt;/p&gt;
&lt;p&gt;When was the last time you saw a book without a logo or brand name?
I only have two books in my &lt;em&gt;entire&lt;/em&gt; collection that fit that criteria.
Actually, when is the last time you saw &lt;strong&gt;anything&lt;/strong&gt; without a logo
or brand name? Go through the room you&amp;rsquo;re in right now and count how many
items you have that don&amp;rsquo;t have a brand name and or logo. No, seriously, do it.
You will be genuinely surprised.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-safe-zone&#34;&gt;The Safe Zone&lt;/h2&gt;
&lt;p&gt;One very important downside of modern brands that impact customers is
what I like to call the &amp;ldquo;&lt;em&gt;safe zone&lt;/em&gt;&amp;rdquo;. The &amp;ldquo;safe zone&amp;rdquo; is a situation in which a
customer buys products of specific brands either due to trust, loyalty,
familiarity, or a mix of all three. This results in the customer not buying
anything else unless it&amp;rsquo;s from one of their chosen brands.&lt;/p&gt;
&lt;p&gt;This usually results in dependence on a specific brand. This is, of course,
intended. And while it is &lt;strong&gt;very&lt;/strong&gt; beneficial to the brand itself, it can
be detrimental to the customer. On one hand, the customer is provided safety
and security knowing that what they get from a specific brand will be
(mostly) consistent. On the other hand, this can trap the customer into
dependence on a brand since not buying from a trusted brand would
be too &amp;ldquo;risky&amp;rdquo; or &amp;ldquo;unsafe&amp;rdquo; (hence the name &amp;ldquo;safe zone&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;This effect can happen on such a large scale that many brand names are
immediately associated with a non-branded objects. For example, do you hear
people say cola or Coca-Cola more? Do you hear people say tissue or
Kleenex more? Do you hear people say slow cooker or Crock-Pot more? The
list goes on and on. Not only does this result in other products being
noticed less, but it also draws a negative light on other products and make
them seem inferior compared to larger brands.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/consoom.webp&#34; title=&#34;Must consooooome!&#34; alt=&#34;consoomer&#34;&gt;&lt;/figure&gt;

&lt;h2 id=&#34;drm&#34;&gt;DRM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.defectivebydesign.org/what_is_drm&#34;&gt;Digital Restrictions Management&lt;/a&gt;,
more commonly referred to as Digital Rights Management, is one way that a
brand keeps customers. DRM essentially restricts what the customer/user
can do with a product. This is usually very prevalent among popular
companies/brands especially in the technology sector.&lt;/p&gt;
&lt;p&gt;The best example I can probably think of is ink cartridges for inkjet printers.
Most major brands of inkjet printers use proprietary ink cartridges with DRM
built into the cartridges themselves. If you try to use a different type of ink
cartridge on your printer, &lt;strong&gt;it won&amp;rsquo;t work&lt;/strong&gt;. If you try to refill the ink in
your cartridge, &lt;strong&gt;it won&amp;rsquo;t work&lt;/strong&gt;. If you buy third party ink cartridges,
&lt;strong&gt;they won&amp;rsquo;t work&lt;/strong&gt;.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; It&amp;rsquo;s not because it is &amp;ldquo;incompatible&amp;rdquo;, it&amp;rsquo;s ink,
it&amp;rsquo;s because the manufacturer wants to force you into brand loyalty and to
buy their products.&lt;/p&gt;
&lt;p&gt;Now it doesn&amp;rsquo;t take a genius to understand that DRM is bad, but for the
handful of people who don&amp;rsquo;t understand why DRM is &lt;em&gt;objectively&lt;/em&gt; awful,
here are a few &lt;a href=&#34;https://creativecommons.org/2017/07/09/terrible-horrible-no-good-bad-drm/&#34;&gt;links to&lt;/a&gt;
&lt;a href=&#34;https://www.defectivebydesign.org/so_youve_got_some_questions_do_you#examples&#34;&gt;understand&lt;/a&gt;
&lt;a href=&#34;https://www.audioholics.com/news/drm-bad-killing-online-music&#34;&gt;why&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/printer.webp&#34; alt=&#34;Printer DRM&#34;&gt;&lt;figcaption&gt;Classic printer DRM at work.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Although the modern conception of branding is very beneficial from an economic
and financial standpoint, it can have many negative side effects outside the
economic and financial realm. It can result in enforcing restrictions on the
customer, physiologically locking them into dependence, and creates obsession
with branding. Although this is great for the brand owners, it sucks for the
everyday customer. Granted, there are many more factors that go into branding
but I think these points really highlight the nature of the current situation.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This, of course, is a centuries old tradition and goes all the way back
to branding livestock to prove ownership.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Unless you make it a habit to tear off labels and branding of products
that you buy. In which case, I wouldn&amp;rsquo;t blame you for doing that.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;And this isn&amp;rsquo;t made any better by the fact that inkjet printer ink
is extremely expensive, especially if it is purchased from the manufacturers
themselves.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Stop Saying C/C&#43;&#43;</title>
			<link>https://brycev.com/blog/stop-saying-c-and-c&#43;&#43;/</link>
			<pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/stop-saying-c-and-c&#43;&#43;/</guid>
			<description>&lt;p&gt;For as long as I can remember, I have heard people say C/C++ when referring to
a project written in C and or C++. A lot of programming/developer jobs also
refer to C/C++ when they need a programmer who knows either C or C++. To most
people who have never touched C or C++ this might not seem like a big deal.
However, the problem is that when people say this term (C/C++) they make it
seem like C and C++ are similar or closely related programming languages.
&lt;strong&gt;That is not true.&lt;/strong&gt; Although C++ was based off of C when it was first
created, these two languages have slowly drifted apart over the years to the
point where they share less and less in common&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id=&#34;c-and-c-are-very-different&#34;&gt;C and C++ are VERY Different&lt;/h2&gt;
&lt;p&gt;There is probably someone who is going to say, &amp;ldquo;Well you can write C code in
a C++ program, so technically C is a subset of C++.&amp;rdquo; The only problem is that
you can write C code in &lt;a href=&#34;https://ziglang.org/documentation/master/#C&#34;&gt;Zig&lt;/a&gt;,
&lt;a href=&#34;https://pkg.go.dev/cmd/cgo&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://github.com/nim-lang/Nim/wiki/Nim-for-C-programmers&#34;&gt;Nim&lt;/a&gt;,
and basically almost every other language out there has a C FFI! So should I refer to Zig,
Go, and Nim as C/Zig, C/Go, and C/Nim? Obviously &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;c-with-classes&#34;&gt;C with Classes&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;But C++ is just C with classes!&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;, it isn&amp;rsquo;t. Anyone who says this obviously has never worked with C++. C++ has
completely different standard libraries, implementations, and standards than C.
It is true that when C++ was first made it was just C with classes&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, that has
long been false ever since C++ has implemented features separate from C.&lt;/p&gt;
&lt;h3 id=&#34;incompatibility&#34;&gt;Incompatibility&lt;/h3&gt;
&lt;h4 id=&#34;void-pointers&#34;&gt;Void Pointers&lt;/h4&gt;
&lt;p&gt;One such case where C++ is incompatible with C is with void pointers.
For example, this program will compile with a C compiler (like GCC), but it
will not compile with a C++ compiler (like G++):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All this code does is allocate 5 bytes to an integer pointer &lt;code&gt;a&lt;/code&gt;. This program
works perfectly fine when compiled with GCC, but if I compile this program with
G++ this error is returned:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;main.c: In function &amp;#39;int main()&amp;#39;:
main.c:4:24: error: invalid conversion from &amp;#39;void*&amp;#39; to &amp;#39;int*&amp;#39; [-fpermissive]
    4 |         int *a = malloc(5);
      |                  ~~~~~~^~~
      |                        |
      |                        void*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason this happens is that &lt;code&gt;malloc&lt;/code&gt; returns a void pointer and C++ cannot
convert a void pointer into an integer pointer unless it is specifically cast
to an integer pointer.&lt;/p&gt;
&lt;h4 id=&#34;kr-syntax&#34;&gt;K&amp;amp;R Syntax&lt;/h4&gt;
&lt;p&gt;Another big incompatibility with C and C++ is that C++ is actually incompatible
with &lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)#K&amp;amp;R_C&#34;&gt;K&amp;amp;R&lt;/a&gt; syntax. Given this example function formatted in K&amp;amp;R syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(a, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(b, (a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will compile perfectly fine for GCC (as expected), however G++ gives us
&lt;em&gt;another&lt;/em&gt; set of errors&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcd.c:3:9: error: &amp;#39;a&amp;#39; was not declared in this scope
    3 | int gcd(a, b)
      |         ^
gcd.c:3:12: error: &amp;#39;b&amp;#39; was not declared in this scope
    3 | int gcd(a, b)
      |            ^
gcd.c:3:13: error: expression list treated as compound expression in initializer [-fpermissive]
    3 | int gcd(a, b)
      |             ^
gcd.c:6:1: error: expected unqualified-id before &amp;#39;{&amp;#39; token
    6 | {
      | ^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This makes it almost impossible to use K&amp;amp;R syntax with C++ unless you format
your function arguments according to &lt;a href=&#34;https://gist.github.com/nicholatian/2d9514feaf9a95e7561a433ac404b141&#34;&gt;ANSI C&lt;/a&gt;.
(I know not many people care about K&amp;amp;R syntax, but I think that it is still an
important difference).&lt;/p&gt;
&lt;p&gt;There are also many other things in C that will not transfer over to C++ like
complex numbers, default return types, and more, but
I think you already get the picture by now. These incompatibilities are not
anything that would break the entire C language if used in conjunction with
C++, but these small differences slowly add up.&lt;/p&gt;
&lt;h3 id=&#34;hard-for-beginners&#34;&gt;Hard for Beginners&lt;/h3&gt;
&lt;p&gt;Not differentiating between C and C++ also has the side effect of ostracizing new
users. Many beginner programmers are lead by the term &amp;ldquo;C/C++&amp;rdquo; to think that
they&amp;rsquo;re basically the same language. In fact there are &lt;a href=&#34;https://medium.com/@yekayama/stop-making-c-c-tutorials-2fa9bc114488&#34;&gt;many&lt;/a&gt; tutorials out there
that are advertised as &amp;ldquo;C/C++ tutorials&amp;rdquo;, continuing the confusion.
This can also scare away C beginners by making them think that understanding
the complexities of C++ are required to understand C (&lt;em&gt;SPOILER&lt;/em&gt;: They&amp;rsquo;re not).
I have fallen for this trap in the past, as well as many others.
C is honestly a very simple programming language, C++ is not.&lt;/p&gt;
&lt;h2 id=&#34;c-and-c-programmers-are-very-different&#34;&gt;C and C++ Programmers are VERY Different&lt;/h2&gt;
&lt;p&gt;With the new C++ standards given throughout the years like C++11, C++20, and
etc. C++ programmers have been given more tools and functions that don&amp;rsquo;t exist
in standard C. This usually results in modern C programs having more lines of
code than modern C++, however this means that modern C is usually more readable
than modern C++. Here is an example question from &lt;a href=&#34;https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer/&#34;&gt;LeetCode&lt;/a&gt;.
Solutions differ, but most C solutions look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximumCount&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; numsSize) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, neg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numsSize; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) pos&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) neg &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; neg &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; pos : neg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though this code is pretty compact for C standards it is still &lt;em&gt;very&lt;/em&gt;
readable. Now for the C++ solutions, there are a lot of variations to this
solution so I will use one that&amp;rsquo;s different &lt;em&gt;enough&lt;/em&gt; from C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximumCount&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; [a, b] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;equal_range(nums.begin(), nums.end(), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;max(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;distance(nums.begin(), a), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;distance(b, nums.end()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses &lt;code&gt;vector&lt;/code&gt; and &lt;code&gt;algorithm&lt;/code&gt; from the C++ standard library&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.
As you can see this code is &lt;em&gt;much&lt;/em&gt; more compact but is definitely not as
readable as the C code. Although the C solution can be compiled by a C++
compiler I wanted to highlight just how different they can be from each other.
This is but one example of how C and C++ programmers have slowly separated
when it comes to programming.&lt;/p&gt;
&lt;h3 id=&#34;many-c-programmers-wont-touch-c&#34;&gt;Many C Programmers Won&amp;rsquo;t Touch C++&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m pretty sure everyone knows the C programmer stereotype by now, the only
thing is that it is &lt;strong&gt;TRUE&lt;/strong&gt;.
Lots of &lt;a href=&#34;https://suckless.org/&#34;&gt;Suckless&lt;/a&gt; users and developers only use
C and POSIX shell in their programs. &lt;a href=&#34;https://harmful.cat-v.org/software/c++/&#34;&gt;Cat-v&lt;/a&gt; endorses
C and C-like languages, but despises C++. Even
&lt;a href=&#34;https://lore.kernel.org/all/alpine.LFD.0.999.0709061839510.5626@evo.linux-foundation.org/&#34;&gt;Linus Torvalds&lt;/a&gt;,
the creator Linux and Git, won&amp;rsquo;t touch C++.
Heck, even I love C but I can&amp;rsquo;t stand programming in C++.&lt;/p&gt;
&lt;p&gt;This is probably the biggest reason why employers &lt;strong&gt;SHOULD NOT&lt;/strong&gt; put C/C++
on job descriptions, especially if they&amp;rsquo;re only looking for C developers.
All they are doing is scaring away competent C developers.&lt;/p&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/cpp.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/cpp.webp&#34; id=&#34;smallimg&#34; alt=&#34;Stop doing C&amp;#43;&amp;#43;!&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re referring to a C program or programmer just say &amp;ldquo;C&amp;rdquo;.
If you&amp;rsquo;re referring to a C++ program or programmer just say &amp;ldquo;C++&amp;rdquo;.
If you&amp;rsquo;re referring to both used separately say something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C and C++&lt;/li&gt;
&lt;li&gt;C, C++&lt;/li&gt;
&lt;li&gt;C++ with C&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOT C/C++&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Only if you&amp;rsquo;re using C &lt;em&gt;together&lt;/em&gt; with C++ would it be acceptable to
say C/C++.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Please note that although these are real concerns with C and C++,
this is more of a rant than anything else (and somewhat satire).&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Fun fact: C++ &lt;em&gt;was&lt;/em&gt; actually called &lt;a href=&#34;https://www.stroustrup.com/bs_faq.html#invention&#34;&gt;&amp;ldquo;C with Classes&amp;rdquo;&lt;/a&gt; before it was
initially released.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Credit to &lt;a href=&#34;https://youtu.be/U6I-Kwj-AvY&#34;&gt;code_report&lt;/a&gt; for these two solutions.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>I Finally Have a VPS</title>
			<link>https://brycev.com/blog/i-finally-have-a-vps/</link>
			<pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/i-finally-have-a-vps/</guid>
			<description>&lt;p&gt;After a little less than a year of waiting, I finally obtained a VPS
from &lt;a href=&#34;https://my.frantech.ca/&#34;&gt;Frantech/BuyVM&lt;/a&gt;. I was told that they are an
exceptional VPS provider, and it turns out to be &lt;strong&gt;true&lt;/strong&gt;. Their pricing is
extremely fair as I can get &lt;em&gt;double&lt;/em&gt; what &lt;a href=&#34;https://www.vultr.com/&#34;&gt;Vultr&lt;/a&gt;
offers for the same exact price (plus unlimited bandwidth). Their support
was also pretty fast so I was able to setup everything relatively quickly.
My only complaint is that the number of servers is limited so it might take
a while to actually get one. Despite Frantech &lt;em&gt;obviously&lt;/em&gt; being better, Vultr
is still a solid choice for a VPS and they make it very easy to setup one.&lt;/p&gt;
&lt;p&gt;I am now hosting my web page from my VPS instead of &lt;a href=&#34;https://sourcehut.org/&#34;&gt;Sourcehut&lt;/a&gt;
and I am hosting my email instead of using &lt;a href=&#34;https://disroot.org&#34;&gt;Disroot&lt;/a&gt;.
Keep in mind that these services (Sourcehut and Disroot&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) are great services
and I would 100% recommend them, however I believe that hosting everything
yourself is better.&lt;/p&gt;
&lt;p&gt;That being said, I do have unlimited bandwidth and about 19GB of storage space
that I still have yet to use. If any of you guys have ideas for what I should
do (hosting internet radio, SearX instance, Mastodon instance, forum, etc.) you
can let me know by email.&lt;/p&gt;
&lt;p&gt;If you would like a VPS for yourself, you can use the links above to get one
from Frantech, if they&amp;rsquo;re available. If not, Vultr is always a solid option
for a VPS (although you do get less). &lt;strong&gt;Or&lt;/strong&gt; you can use my referral links
to get a VPS below. It&amp;rsquo;s a nice and indirect way to support me.&lt;/p&gt;
&lt;h3 id=&#34;referral-links&#34;&gt;Referral Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.frantech.ca/aff.php?aff=6418&#34;&gt;Frantech/BuyVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vultr.com/?ref=9386356&#34;&gt;Vultr&lt;/a&gt; (Normal affiliate link)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vultr.com/?ref=9386357-8H&#34;&gt;Vultr&lt;/a&gt; (&lt;strong&gt;Get $100&lt;/strong&gt; to use for a VPS)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Disroot provides services like cloud storage, XMPP chat, paste bin, Git,
and more. They&amp;rsquo;re an amazing replacement for the Google suite.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Odysee Channel</title>
			<link>https://brycev.com/blog/odysee-channel/</link>
			<pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/odysee-channel/</guid>
			<description>&lt;p&gt;For those of you who don&amp;rsquo;t already know, I recently synced my entire YouTube
channel to &lt;a href=&#34;https://odysee.com/@bryce:c&#34;&gt;Odysee&lt;/a&gt;. So for those of you who want to avoid YouTube and Google
entirely that is now an option. I will continue to upload videos to YouTube
but they will be automaticly synced to Odysee shortly after I upload them
(usually takes about an hour). I don&amp;rsquo;t plan on uploading exclusively onto
Odysee, but I might post some videos that I normally wouldn&amp;rsquo;t post onto
YouTube for one reason or another, so keep an eye out. ð§âð&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Updating My GPG Key</title>
			<link>https://brycev.com/blog/updating-my-gpg-key/</link>
			<pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/updating-my-gpg-key/</guid>
			<description>&lt;p&gt;I have updated my GPG key. I will &lt;strong&gt;not&lt;/strong&gt; be able to read any new encrypted emails
that use my old GPG key.&lt;/p&gt;
&lt;p&gt;You can find my new GPG key &lt;a href=&#34;https://brycevandegrift.xyz/bpv.gpg&#34;&gt;here&lt;/a&gt; or import it
directly by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fL &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://brycevandegrift.xyz/bpv.gpg&amp;#34;&lt;/span&gt; | gpg --import
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
		</item>
		
		<item>
			<title>Why I Am Switching to Firefox</title>
			<link>https://brycev.com/blog/why-i-am-switching-to-firefox/</link>
			<pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/why-i-am-switching-to-firefox/</guid>
			<description>&lt;p&gt;For the past year I have used &lt;a href=&#34;https://qutebrowser.org/&#34;&gt;Qutebrowser&lt;/a&gt; almost exclusively as my main
web browser. I even made a video on how extensible and great it is &lt;a href=&#34;https://youtu.be/N79au5Xq65s&#34;&gt;here&lt;/a&gt;.
However there have been a few glaring issues with it over other browsers
like Firefox that I have noticed over the past year. Although Qutebrowser
is a great web browser, I think that these issues are too important for
me to ignore.&lt;/p&gt;
&lt;p&gt;Now before I start bashing Qutebrowser on where it falls short of my
expectations, I should rightfully praise it for what it does right compared
to other web browsers. Qutebrowser does have a lot of cool and innovative
features that most web browsers wouldn&amp;rsquo;t even think about implementing.&lt;/p&gt;
&lt;h2 id=&#34;what-qutebrowser-does-right&#34;&gt;What Qutebrowser does right&lt;/h2&gt;
&lt;h3 id=&#34;keybindings-and-ui&#34;&gt;Keybindings and UI&lt;/h3&gt;
&lt;p&gt;Unlike most browsers, Qutebrowser has Vim keybindings by default. This means
that every single action is bound to a specific key or combination of keys.
This makes using and navigating in Qutebrower leagues faster than in other
browsers like Firefox. There are extensions for Firefox that do allow you
to use Vim keybindings, however they are not as tightly integrated into the
browser as Qutebrowser. For Qutebrowser, &lt;strong&gt;every single action has a keybinding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The user interface for Qutebrowser (or possibly lake thereof), in my opinion,
is very clean and nice to look at. Not only does it look nice, but it is also
highly customizable so you can change it to suit your personal preference.&lt;/p&gt;
&lt;h3 id=&#34;adblocking-by-default&#34;&gt;AdBlocking by default&lt;/h3&gt;
&lt;p&gt;By default, Qutebrowser has simple hosts adblocking enabled. Even though
there are far better adblocking solutions (uBlock Origin is the gold standard),
Qutebrowser still earns some points for having some sort of adblocking enabled
by default. Qutebrowser also has an adblocking mode simular to Brave Browser&amp;rsquo;s
adblocking mode if hosts adblocking isn&amp;rsquo;t enough for you.&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/boomer-python.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/boomer-python.webp&#34; alt=&#34;Boomer stuff&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;Now I know that using Python as a language for writing a big application has
some serious drawbacks, however in the case of Qutebrowser, writing it in
Python gives it some unique traits. For starters, writing Qutebrowser in
Python makes it easier to customize and extend in numerous ways. Being able
to program in my own keybindings, extra features, and more is (for a lack of a
better word) &lt;strong&gt;awesome&lt;/strong&gt;. Although there are better language choices than
Python (for example Lua is a solid choice&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) for what it is, having
Qutebrowser written in Python comes with some great benefits&lt;/p&gt;
&lt;h2 id=&#34;what-qutebrowser-does-wrong&#34;&gt;What Qutebrowser does wrong&lt;/h2&gt;
&lt;h3 id=&#34;bloated&#34;&gt;Bloated&lt;/h3&gt;
&lt;p&gt;This point somewhat ties into the fact that Qutebrowser is written in Python,
but Qutebrowser is anything but small or fast. Qutebrowser uses just about
the same amount of resources on my computer as Firefox (which is considered a
bloated browser) and still runs slower. It also takes up a lot more space
on my system than Firefox as well. The executable for Qutebrowser isn&amp;rsquo;t
actually that big, however the dependices needed to run it take up more space
than Firefox itself.&lt;/p&gt;
&lt;h3 id=&#34;adblocking&#34;&gt;Adblocking&lt;/h3&gt;
&lt;p&gt;Like I stated earlier, Qutebrowser has adblocking enabled by default, which is
really nice, however I don&amp;rsquo;t think that its builtin adblocker does enough.
My standard for adblocking (as mentoned before) is uBlock Origin, and the
adblocking options that Qutebrowser provides are not really too impressive.
Compared to uBlock Origin, Qutebrowser&amp;rsquo;s adblockers don&amp;rsquo;t nearly do as much.&lt;/p&gt;
&lt;h3 id=&#34;python-1&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Didn&amp;rsquo;t I just say that writing Qutebrowser in Python was a good thing?
Well&amp;hellip;yes, but actually no. Python does provide Qutebrowser with an easy
language to write the program in as well as configure and extend the program
in, but the biggest downside of writing a browser in Python is speed. Qutebrowser,
being written in Python, is just a little less resource intensive than Firefox
on my system, however it is about half as fast. This compromise in performance is
expected for a program written in Python and for a browser, performance is
pretty important.&lt;/p&gt;
&lt;h2 id=&#34;why-firefox&#34;&gt;Why Firefox?&lt;/h2&gt;
&lt;p&gt;Firefox is the only web browser that is free software and also mitigates
all of the problems I have discussed. Even though Firefox is still a bit
bloated, it does fix adblocking (with uBlock Origin) and it is written in a more sane programming
language. Firefox does not come with adblocking or keybindings by default like
Qutebrowser, but they can be added in with extensions like the aforementioned
&lt;a href=&#34;https://ublockorigin.com/&#34;&gt;uBlock Origin&lt;/a&gt; or &lt;a href=&#34;https://tridactyl.xyz/&#34;&gt;Tridactyl&lt;/a&gt;.
It is sometimes a pain to change the default settings for Firefox since a lot
of useless and harmful things are enabled by default like telemetry, Pocket,
Firefox Accounts, and more. After all of that is said and done, Firefox is
actually a pretty good web browser.&lt;/p&gt;
&lt;p&gt;Although Firefox is bloated, sometimes you need a bloated browser for
the bloated internet.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;There is actually a web browser written in Lua called &lt;a href=&#34;https://luakit.github.io/&#34;&gt;LuaKit&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>Rust in the Linux Kernel</title>
			<link>https://brycev.com/blog/rust-in-the-linux-kernel/</link>
			<pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/rust-in-the-linux-kernel/</guid>
			<description>&lt;p&gt;I know, I know, everyone is talking about support for the &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; programming
language being &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8aebac82933ff1a7c8eede18cab11e1115e2062b&#34;&gt;added to the Linux kernel&lt;/a&gt;, and I&amp;rsquo;m no exception. This event
is &lt;strong&gt;HUGE&lt;/strong&gt; when it comes to Linux kernel development. Since the Linux kernel
is predominantly written in C and has been that way for about the last 30
years, this comes as a very big surprise. I honestly would have expected
C++ to be integrated in the Linux kernel if it weren&amp;rsquo;t for Linus Torvald&amp;rsquo;s
&lt;a href=&#34;https://lore.kernel.org/all/alpine.LFD.0.999.0709061839510.5626@evo.linux-foundation.org/&#34;&gt;hatred for C++&lt;/a&gt; (granted, I dislike C++ as well).&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m not here to praise Rust as some sort of gift to the Linux kernel, nor
am I here to talk horribly about it and say that it has no use in the Linux
kernel whatsoever, because it does have a use. I am here to take a look at
what Rust does and doesn&amp;rsquo;t do good and see if that lines up with the needs of
the Linux kernel.&lt;/p&gt;
&lt;h2 id=&#34;speedperformance&#34;&gt;Speed/Performance&lt;/h2&gt;
&lt;p&gt;The average speed of programs written in Rust is about on par with programs
written in C from what I&amp;rsquo;ve seen. You can look at some of the benchmarks
&lt;a href=&#34;https://programming-language-benchmarks.vercel.app/c-vs-rust&#34;&gt;here&lt;/a&gt;, but I also have a quick and simple one that I whipped up.
This example uses a very lazy and inefficient version of the Fibonacci
algorithm that I used a while ago in my &lt;a href=&#34;https://brycevandegrift.xyz/blog/the-importance-of-lisp/#recursion&#34;&gt;lisp article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m no expert programmer so don&amp;rsquo;t complain if I didn&amp;rsquo;t write either of
these programs &amp;ldquo;correctly&amp;rdquo;, it&amp;rsquo;s just a simple benchmark&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://brycevandegrift.xyz/hardware/&#34;&gt;Machine specs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implemented in C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt; num) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Implemented in Rust:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(num: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib(num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fib(num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result:&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fib(&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;println!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The average time for C compiled with GCC and &lt;code&gt;-O2&lt;/code&gt; optimization was 3.30
seconds and Rust compiled with RustC and &lt;code&gt;-O2&lt;/code&gt; as well was 4.32 seconds.
C without optimizations was 9.31 seconds and Rust without optimizations was
12.69 seconds on average. So unoptimized Rust is a decent bit slower than C
and optimized Rust is about a second behind C which is what I would expect.
A bit of a performance hit is what I would expect for a language that focuses
more on memory safety rather than pure speed.&lt;/p&gt;
&lt;h2 id=&#34;size&#34;&gt;Size&lt;/h2&gt;
&lt;p&gt;When it comes to size, Rust and C are both around the same as well. Although
I sometimes do hear complaints about Rust&amp;rsquo;s standard library being large, the
Rust standard library probably isn&amp;rsquo;t going to be included in the Linux kernel.
Compiling a &amp;ldquo;Hello, World!&amp;rdquo; program in GCC with &lt;code&gt;-O2&lt;/code&gt; is around 21KB normally
and 15KB stripped. Compiling the same program in RustC with &lt;code&gt;-O2&lt;/code&gt; results in a
21KB binary normally and a 14KB binary stripped (no standard library included).
So Rust can actually end up with smaller binaries than C on some occasions,
but in reality I would honestly expect the same size (if not slightly bigger)
binary sizes for Rust for most cases.&lt;/p&gt;
&lt;h2 id=&#34;compilerfrontend&#34;&gt;Compiler/Frontend&lt;/h2&gt;
&lt;p&gt;The Rust compiler is probably one of Rust&amp;rsquo;s biggest strengths compared to C.
The Rust compiler is a very helpful tool for developers. There are other just as
helpful tools that the creators of Rust provide separately like &lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt;
(like gofmt if you have used Go before), &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt;,
and more. But the Rust compiler is probably one of the most straightforward
and user friendly (in a mostly good way) compilers that I have ever seen.
Just take a look at the difference between an error message in GCC v.s. an
error message in RustC. The same mistake is being made in both languages.&lt;/p&gt;
&lt;p&gt;An error message from GCC:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test.c: In function &amp;#39;main&amp;#39;:
test.c:8:32: warning: passing argument 1 of &amp;#39;sumOfSquares&amp;#39; makes integer from pointer without a cast
[-Wint-conversion]
    8 |  int32_t result = sumOfSquares(&amp;#34;Number&amp;#34;);
      |                                ^~~~~~~~
      |                                |
      |                                char *
test.c:3:30: note: expected &amp;#39;int32_t&amp;#39; {aka &amp;#39;int&amp;#39;} but argument is of type &amp;#39;char *&amp;#39;
    3 | int32_t sumOfSquares(int32_t x, int32_t y) {
      |                      ~~~~~~~~^
test.c:8:19: error: too few arguments to function &amp;#39;sumOfSquares&amp;#39;
    8 |  int32_t result = sumOfSquares(&amp;#34;Number&amp;#34;);
      |                   ^~~~~~~~~~~~
test.c:3:9: note: declared here
    3 | int32_t sumOfSquares(int32_t x, int32_t y) {
      |         ^~~~~~~~~~~~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An error message from RustC:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error[E0061]: this function takes 2 arguments but 1 argument was supplied
 --&amp;gt; test.rs:6:19
  |
6 |     let _result = sum_of_squares(&amp;#34;Number&amp;#34;);
  |                   ^^^^^^^^^^^^^^----------
  |                                 ||
  |                                 |expected `i32`, found `&amp;amp;str`
  |                                 an argument of type `i32` is missing
  |
note: function defined here
 --&amp;gt; test.rs:1:4
  |
1 | fn sum_of_squares(x: i32, y: i32) -&amp;gt; i32 {
  |    ^^^^^^^^^^^^^^ ------  ------
help: provide the argument
  |
6 |     let _result = sum_of_squares(/* i32 */, /* i32 */);
  |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: aborting due to previous error

For more information about this error, try `rustc --explain E0061`.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These error messages may look similar, but in my opinion the error/warning
messages from RustC are just a bit more clear than the messages from GCC and
definitely a lot clearer than other compilers.&lt;/p&gt;
&lt;p&gt;When it comes to the Rust frontend, LLVM, I don&amp;rsquo;t really mind it as a frontend.
For the Linux kernel, I think that GCC would be a better frontend for Rust to
use and there is work being done on just &lt;a href=&#34;https://github.com/Rust-GCC/gccrs&#34;&gt;that&lt;/a&gt;.
But many languages use like &lt;a href=&#34;https://dlang.org/&#34;&gt;D&lt;/a&gt; (&lt;a href=&#34;https://github.com/ldc-developers/ldc&#34;&gt;LDC&lt;/a&gt;), newer versions of &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;, &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt;, and
many other languages use LLVM and they generate pretty good results most of
the time. Is it the most ideal frontend when working with the Linux kernel,
probably not, but is it the worst? Definitely not.&lt;/p&gt;
&lt;h2 id=&#34;memory-safety&#34;&gt;Memory Safety&lt;/h2&gt;
&lt;p&gt;What everyone knows Rust for, it&amp;rsquo;s memory safety. The biggest tool that Rust
has at it&amp;rsquo;s disposal to try to guarantee memory safety is the borrow checker.
For those of you who don&amp;rsquo;t know what the borrow checker is, the borrow checker
assigns memory to a variable known as an owner. Once the owner of a piece of
data is out of scope, it deallocates the memory. You can also &amp;ldquo;borrow&amp;rdquo; the
memory (hence the name &amp;ldquo;borrow checker), but I won&amp;rsquo;t go too into detail,
since there are plenty of better explaniations of Rust&amp;rsquo;s borrow checker. Just
keep in mind that the borrow checker is very important for memory safety.&lt;/p&gt;
&lt;p&gt;I think that memory safety is Rust&amp;rsquo;s biggest and most important contribution
to the Linux kernel. Memory safety can eliminate a lot if not the majority of
bugs out there in the wild and I think that the Linux kernel is no exception.
If used correctly, I think that Rust&amp;rsquo;s memory safety could make the Linux
kernel even more robust than it already is with little to no sacrifices.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, I think that the inclusion of Rust in the Linux kernel isn&amp;rsquo;t too bad
of a decision. Don&amp;rsquo;t get me wrong, there are some bad or not fully fleshed
out parts to the language, but otherwise it&amp;rsquo;s pretty solid. Now I&amp;rsquo;m no expert
programmer in either C or Rust, but I think that there could be a very good
balance within the Linux kernel if Rust is used correctly.&lt;/p&gt;
&lt;p&gt;That being said, I&amp;rsquo;m personally still not sold on Rust&amp;rsquo;s inclusion into the Linux
kernel. Despite the advantages of memory safety and a better compiler there
are still lots of parts of Rust that are not fully fleshed out and could
cause various problems for the Linux kernel. Although I think that Rust is
the best choice of any language out there to add to the Linux kernel,
I personally don&amp;rsquo;t think that another language needs to be added to the Linux
kernel. I guess all that I can do is wait and see if this addition to the Linux
kernel is a good one or not.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>The Importance of Lisp</title>
			<link>https://brycev.com/blog/the-importance-of-lisp/</link>
			<pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/the-importance-of-lisp/</guid>
			<description>&lt;p&gt;Lisp (also known as LISP) is a family of programming languages that have had a
significant impact on the world of computing. Lisp has had and still
has a great influence on the evolution of programming languages and computing
theory as a whole. It remains a very easy language to learn and not that hard
to master.&lt;/p&gt;
&lt;p&gt;For those of you who don&amp;rsquo;t know what Lisp is, Lisp stands for &amp;ldquo;LISt Processor&amp;rdquo;.
A Lisp program is made up of at least of at least one &amp;ldquo;list&amp;rdquo; which is
indicated by an expression surrounded by parentheses. So for example,
if you wanted to multiply 2 and 4, you would give an expression like this
to a Lisp interpreter or compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Results in 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Lisp interpreter or compiler evaluates the contents of the list to
produce a result. The first element of the list is the operator being used,
in this case its multiplication (&lt;code&gt;*&lt;/code&gt;). Any other items in the list are
arguments given to the operator, in this case &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;. If you are familiar
with Polish Notation or Prefix Notation then this may look very similar, the
only difference being the addition of parentheses to enclose the expression.&lt;/p&gt;
&lt;p&gt;We can easily create compound expressions by just putting lists inside of
lists like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(- &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; Equivalent to 10 - (4 / 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(+ (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; Equivalent to (2 * 2) + (2 * 5)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It takes a bit of getting used to, but Lisp&amp;rsquo;s notation makes it very easy to
string together compound expressions.&lt;/p&gt;
&lt;h2 id=&#34;practical-lisp&#34;&gt;Practical Lisp&lt;/h2&gt;
&lt;p&gt;Nowadays there are two different major dialects of Lisp, &lt;strong&gt;Common Lisp&lt;/strong&gt; and
&lt;strong&gt;Scheme&lt;/strong&gt;. There are not that many differences between Common Lisp and
Scheme so I will use the Scheme dialect in the rest of these examples since
I am familiar with it.&lt;/p&gt;
&lt;p&gt;If we want to, we can define custom operators, functions, or variables just
like in any other programming language. To do so in Scheme we use the
&lt;code&gt;define&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;x &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Define the variable x as 24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;mult *) &lt;span style=&#34;color:#75715e&#34;&gt;; Define the operator mult as multiplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;circum&lt;/span&gt; radius) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; radius)) &lt;span style=&#34;color:#75715e&#34;&gt;; Define circumference as 2 * Ï * radius&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may have noticed that we defined all three of these with the same &lt;code&gt;define&lt;/code&gt;
keyword, so what makes a variable different from a function? Nothing really.
The great thing about Lisp is that almost everything defined under a &lt;code&gt;define&lt;/code&gt;
statement is treated the same. This means that almost anything we can do with
variables we can do with functions and vice versa. So, for example, we can
create a function like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;applyFunc&lt;/span&gt; func arg1 arg2) (&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt; arg1 arg2))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function, &lt;code&gt;applyFunc&lt;/code&gt;, takes three arguments: a function and two arguments
for the given function. It then applies the two arguments to the given function
and spits out a result. We can test our &lt;code&gt;applyFunc&lt;/code&gt; function like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-squares&lt;/span&gt; x y) (+ (* x x) (* y y))) &lt;span style=&#34;color:#75715e&#34;&gt;; Same as x^2 + y^2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;applyFunc&lt;/span&gt; sum-of-squares &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this may look fairly useless at the moment because we can just call
&lt;code&gt;sum-of-squares&lt;/code&gt; directly and pass it arguments manually. However, being able
to pass functions as arguments opens a whole new world of possibilities when
it comes to programming.&lt;/p&gt;
&lt;h2 id=&#34;higher-order-functions&#34;&gt;Higher-Order Functions&lt;/h2&gt;
&lt;p&gt;This brings us to an important topic, anonymous functions using the &lt;code&gt;lambda&lt;/code&gt;
keyword. The &lt;code&gt;lambda&lt;/code&gt; keyword creates a one-time use function, this can be
very useful for passing to another function as an argument. As an example we
can use a lambda function with our &lt;code&gt;applyFunc&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;applyFunc&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y) (* x y)) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Same a 2 * 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example above creates a one-time use function &lt;code&gt;(lambda (x y) (* x y))&lt;/code&gt;
and passes it to &lt;code&gt;applyFunc&lt;/code&gt; with the arguments &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;. Although the
result isn&amp;rsquo;t that spectacular, the implications of lambda functions opens up
a whole new world of possibilities for programming that only exist in
functional languages like Lisp. Functions that take functions or return
functions are called &lt;code&gt;higher-order functions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lisp was one of, if not the first language to implement higher-order functions
in a programming language. Other high-level programming languages like Lua,
Python, Haskell, and more followed suit much later.&lt;/p&gt;
&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;
&lt;p&gt;Another important concept pioneered by Lisp in the world of programming is
recursion. A function is a recursive function when it calls itself, pretty
simple. Almost all recursive functions also have a base-case or exit clause
in order to stop recurring, otherwise they run forever.
If you still don&amp;rsquo;t understand recursion then read this sentence again. ;)&lt;/p&gt;
&lt;p&gt;As an example, let&amp;rsquo;s translate the equation for Fibonacci numbers into a
Lisp expression. The mathematical definition is a follows:&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/fib.webp&#34; title=&#34;Recursive Fibonacci Equation&#34; alt=&#34;Fibonacci Equation&#34;&gt;&lt;/figure&gt;

&lt;p&gt;A translation from mathematical notation into Lisp would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; n)			  &lt;span style=&#34;color:#75715e&#34;&gt;; Begin function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt;= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) n			  &lt;span style=&#34;color:#75715e&#34;&gt;; If n &amp;lt;= 1 then return n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))))) &lt;span style=&#34;color:#75715e&#34;&gt;; Else return fib(n-1) + fib(n-2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the &lt;code&gt;fib&lt;/code&gt; function defined above calls itself until it meets
the base requirements to end the recursive loop. Recursion makes it stupidly
easy to translate recursive mathematical functions to Lisp expressions.
Just like higher-order functions, Lisp was one of the first programming languages
to implement this and other languages followed afterwards.&lt;/p&gt;
&lt;h2 id=&#34;hold-up&#34;&gt;Hold Up&lt;/h2&gt;
&lt;p&gt;Now, before you go out and write your next project in Lisp, you should keep
something in mind. Lisp is &lt;strong&gt;not&lt;/strong&gt; the fastest or smallest language out there, it
was not designed to be so. There are some pretty good implementations of Lisp
out in the wild, but don&amp;rsquo;t expect them to outperform C, Go, Lua, or even
Python most of the time.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re going to program something in Lisp you should keep these things in
mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How important is execution speed?&lt;/li&gt;
&lt;li&gt;How important is program/runtime size?&lt;/li&gt;
&lt;li&gt;How important is portability?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you value any three of these too much, then you might not want to write
your program in Lisp. You probably don&amp;rsquo;t want to write a program that only
takes up a few kilobytes in Lisp, nor would you want to write a program that
needs millisecond speed either. However for all other needs Lisp works
perfectly fine if not exceptionally great!&lt;/p&gt;
&lt;p&gt;But this brings us back to the importance of Lisp altogether. Most people
look at Lisp and see a language that innovated countless things in the field
of programming languages, but eventually got replaced by newer languages. But
Lisp as a language is still very much alive and making improvements and
innovations to this day. It is still a very good programming language for
tackling many tasks and remains one of my favorite programming languages.&lt;/p&gt;


&lt;figure &gt;&lt;a href=&#34;https://brycev.com/p/lisp.webp&#34;&gt;&lt;img src=&#34;https://brycev.com/p/lisp.webp&#34; alt=&#34;LISP machine&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

</description>
		</item>
		
		<item>
			<title>Switching to Hugo</title>
			<link>https://brycev.com/blog/switching-to-hugo/</link>
			<pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/switching-to-hugo/</guid>
			<description>&lt;p&gt;Over the last couple of days I have been migrating my blog from using a
markdown/Pandoc blog system to using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; for my entire website.&lt;/p&gt;
&lt;p&gt;For those of you who don&amp;rsquo;t know what Hugo is, Hugo is a static site generator
that is written in &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;. It takes plain markdown and converts
it to plain HTML and CSS just like Pandoc. The biggest difference it has from
Pandoc is that Hugo is written specifically for creating static sites. To put
it bluntly, Hugo does one thing, and it does it well.&lt;/p&gt;
&lt;p&gt;I might make a video on Hugo on some point as there&amp;rsquo;s actually a lot of depth
to it and it&amp;rsquo;s very customizable and extensible. But despite having a lot of
depth to it, Hugo generates relatively small and fast static webpages.
It&amp;rsquo;s honestly a very good static site generator and I will be using it over my
markdown/Pandoc blog system from now on.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Changing My Website Host</title>
			<link>https://brycev.com/blog/changing-my-website-host/</link>
			<pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/changing-my-website-host/</guid>
			<description>&lt;p&gt;For the longest time I have used &lt;a href=&#34;https://www.infinityfree.net/&#34;&gt;Infinity Free&lt;/a&gt; as the host for my website since it has free website hosting.
However, I havenât been able to successfully set up a SSL certificate without using Cloudflare.
Cloudflare has not had a good reputation and, in my opinion, &lt;a href=&#34;https://www.unixsheikh.com/articles/stay-away-from-cloudflare.html&#34;&gt;cannot be trusted&lt;/a&gt; &lt;a href=&#34;https://www.devever.net/~hl/cloudflare&#34;&gt;at all&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1-sourcehut&#34;&gt;1. &lt;a href=&#34;https://sourcehut.org/&#34;&gt;Sourcehut&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sourcehut provides static website hosting, git repository hosting, gemini hosting (sadly no gopher hosting) and many other things.
The upside of using Sourcehut versus a lot of other platforms for hosting my website is that they use only free and open source software for hosting.&lt;/p&gt;
&lt;p&gt;Hosted websites are automatically outfitted with SSL certificates which reduces the hassle (and they donât use Cloudflare).
My git repositories are also hosted at Sourcehut so it would make sense to move my website there.
Sourcehut also provides paste bins, mailing lists, wikis, and more useful tools.&lt;/p&gt;
&lt;p&gt;One caveat is that, even though service is currently 100% free (as in free beer), once Sourcehut is out of alpha, there will probably be a price tag associated with all the services (although, right now the price doesn&amp;rsquo;t look that bad.)&lt;/p&gt;
&lt;h2 id=&#34;2-get-a-vps&#34;&gt;2. Get a VPS&lt;/h2&gt;
&lt;p&gt;This may be my best option in the long run as itâs the closest thing to self hosting that I can get.
I can host my website, git repositories, as well as almost anything else that I like including chat servers, forums, email, and etc.&lt;/p&gt;
&lt;p&gt;The biggest downside of this is the price, which can vary from a couple dozen dollars a year to a few &lt;strong&gt;hundred&lt;/strong&gt; dollars a year.&lt;/p&gt;
&lt;h2 id=&#34;3-move-to-some-other-3rd-party-static-site-host&#34;&gt;3. Move to some other 3rd party static site host&lt;/h2&gt;
&lt;p&gt;Iâm probably more likely to self host my website before I resort to hosting it using &lt;em&gt;another&lt;/em&gt; not well known 3rd party service.
My trust in most 3rd party hosts is slowly dwindling as the years go by.&lt;/p&gt;
&lt;h2 id=&#34;the-verdict&#34;&gt;The verdict&lt;/h2&gt;
&lt;p&gt;I currently plan to move my website to Sourcehut hosting for the time being, however I plan to eventually self host everything I need and become self reliant.
I also might move my website to a more elegant static site generator as writing and managing everything from scratch is starting to make everything a bit more cumbersome.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Corebooting a Thinkpad X220</title>
			<link>https://brycev.com/blog/corebooting-a-thinkpad-x220/</link>
			<pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/corebooting-a-thinkpad-x220/</guid>
			<description>

&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/thinkpad.webp&#34; alt=&#34;My Thinkpad X220&#34;&gt;&lt;figcaption&gt;My Thinkpad X220&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&#34;you-need&#34;&gt;You Need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Thinkpad X220&lt;/li&gt;
&lt;li&gt;A Raspberry Pi&lt;/li&gt;
&lt;li&gt;Female to female jumper wires&lt;/li&gt;
&lt;li&gt;SOIC8 test clip&lt;/li&gt;
&lt;li&gt;Another computer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;disassembly&#34;&gt;Disassembly&lt;/h2&gt;
&lt;p&gt;For disassembly you can watch my video &lt;a href=&#34;https://www.youtube.com/watch?v=hERguULT7Vo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But youâll just have to remove all the screws with the keyboard icon and all the screws with the box(ish) icon.
(Like I said, you can watch the video).&lt;/p&gt;
&lt;h2 id=&#34;attaching-the-clip-to-the-bios-chip&#34;&gt;Attaching the clip to the BIOS chip&lt;/h2&gt;
&lt;p&gt;In order to actually read/write to the BIOS chip you need to attach the SOIC8 clip to the bios chip.&lt;/p&gt;
&lt;h3 id=&#34;x220-bios-pinout&#34;&gt;X220 BIOS pinout&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                   ______
        MOSI  5 --|      |-- 4  GND
         CLK  6 --| BIOS |-- 3  No Connection
No Connection 7 --|      |-- 2  MISO
   VCC (3.3V) 8 --|______|-- 1  CS
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;raspberry-pi-pinout&#34;&gt;Raspberry Pi pinout&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                        CS   GND
  2                     |     |         40
+-----------------------v-----v-----------+
| x x x x x x x x x x x x x x x x x x x x |
| x x x x x x x x x x x x x x x x x x x x |
+-----------------^-^-^-^-----------------+
  1               | | | |               39
                VCC | | CLK
               MOSI/   \MISO
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;setting-up-the-raspberry-pi&#34;&gt;Setting up the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;Make sure to update your Raspberry PI and install and the needed packages as well as flashrom using these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install build-essential pciutils usbutils libpci-dev libusb-dev libftdi1 libftdi-dev zlib1g-dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://review.coreboot.org/flashrom.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd flashrom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to download the Coreboot repo on our Raspberry PI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive https://review.coreboot.org/coreboot.git ~/coreboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to install ifdtool on the Raspberry PI, you can do that by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/coreboot/util/ifdtool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reading-the-bios&#34;&gt;Reading the BIOS&lt;/h2&gt;
&lt;p&gt;First, we are going to create an alias so we donât need to type in a long drawn out command every time we want to read/write to the BIOS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias fr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sudo flashrom -p linux_spi:dev=/dev/spidev0.0,spispeed=1024&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can get the name of our BIOS chip by just running &lt;code&gt;fr&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should give you multiple chip names.
All of these are the same chip just with different names so you can use any of them, mine is âMX25L6405â.
We are going to use this to set a &lt;code&gt;CHIP&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CHIP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MX25L6405&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are now ready to read the flash from the BIOS chip.
We are going to do this a few times in order to make sure that the connection is consistent when reading and writing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash01.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash02.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash03.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;md5sum flash01.bin flash02.bin flash03.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output for &lt;code&gt;md5sum&lt;/code&gt; for all three of the files should be exactly the same.
If the checksum for all three files are not the same then &lt;strong&gt;DO NOT CONTINUE!!!&lt;/strong&gt;
Make sure that your connection is good and retry until everything reads correctly.
(If necessary, the spispeed can be lowered from 1024 for a more reliable read).&lt;/p&gt;
&lt;h2 id=&#34;optional-removing-the-management-engine&#34;&gt;(Optional) Removing the management engine&lt;/h2&gt;
&lt;p&gt;First we need to download me_cleaner.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/corna/me_cleaner ~/me_cleaner
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run me_cleaner on our flash file, in this case I will be using &lt;code&gt;flash01.bin&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/me_cleaner/me_cleaner.py -S flash01.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If all goes well you should see a message that says: &lt;code&gt;Done! Good Luck!&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;separating-the-image&#34;&gt;Separating the image&lt;/h2&gt;
&lt;p&gt;Now we can run ifdtool on our flash image in order to separate it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifdtool -x flash01.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now have four different &lt;code&gt;.bin&lt;/code&gt; files: 1. &lt;code&gt;flashregion_0_flashdescriptor.bin&lt;/code&gt; 2. &lt;code&gt;flashregion_1_bios.bin&lt;/code&gt; (Not needed) 3. &lt;code&gt;flashregion_2_intel_me.bin&lt;/code&gt; 4. &lt;code&gt;flashregion_3_gbe.bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can now rename all the files to have a shorter name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv flashregion_0_descriptor.bin descriptor.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv flashregion_2_intel_me.bin me.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv flashregion_3_gbe.bin gbe.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-up-coreboot&#34;&gt;Setting up Coreboot&lt;/h2&gt;
&lt;p&gt;If you want to compile Coreboot on your Raspberry PI you can go ahead, however it might take anywhere from a few hours to a few &lt;strong&gt;DAYS&lt;/strong&gt;, so be warned.
I copied my â.binâ files to my laptop in order to compile faster.&lt;/p&gt;
&lt;p&gt;Now we want to download the Coreboot repo onto our computer that we are compiling Coreboot on.
(This may take a while).
(If you are compiling Coreboot on your Raspberry PI you can skip this).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive https://review.coreboot.org/coreboot.git ~/coreboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;h2 id=&#34;optional-downloading-vga-bios&#34;&gt;(Optional) Downloading VGA BIOS&lt;/h2&gt;
&lt;p&gt;Windows and some Linux distributions rely on the VGA BIOS in order to display video.
So you can optionally download it if you need it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fLO &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/thetarkus/x220-coreboot-guide/raw/master/vga-8086-0126.bin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now we need to make a directory to place our â.binâ files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p ~/coreboot/3rdparty/blobs/mainboard/lenovo/x220
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv descriptor.bin ~/coreboot/3rdparty/blobs/mainboard/lenovo/x220/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv me.bin ~/coreboot/3rdparty/blobs/mainboard/lenovo/x220/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv gbe.bin ~/coreboot/3rdparty/blobs/mainboard/lenovo/x220/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuring-coreboot&#34;&gt;Configuring Coreboot&lt;/h2&gt;
&lt;p&gt;On the computer youâre compiling Coreboot with, youâll need to install these development packages (or their equivalents).
On Ubuntu, Debian, or any derivative you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install git build-essential gnat flex bison libncurses5-dev wget zlib1g-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Void Linux (what I use) I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo xbps-install git base-devel ncurses-devel wget zlib-devel gcc-ada
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can go into the Coreboot directory and run make &lt;code&gt;nconfig&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/coreboot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make nconfig
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see a menu pop up, now we can configure our Coreboot build.
Below is a list of what needs to be enabled, you can leave the rest of the settings just the way they are.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;General Setup
    - [*] Compress ramstage with LZMA
    - [*] Include coreboot .config file into the ROM image
    - [*] Allow use of binary-only repository

Mainboard
    - Mainboard vendor (Lenovo)
    - Mainboard model (Thinkpad X220)
    - ROM chip size (8192 KB (8 MB))
    - (0x100000) Size of CBFS filesystem in ROM

Chipset
    - [*] Enable VMX for virtualization
    - Include CPU microcode in CBFS (Generate from tree)
    - Flash ROM locking on S3 resume (Don&amp;#39;t lock ROM sections on S3 resume)
    - [*] Add Intel descriptor.bin file
      (3rdparty/blobs/mainboard/$(MAINBOARDDIR)/descriptor.bin) Path and filename of the descriptor.bin file
    - [*] Add Intel ME/TXE firmware
      (3rdparty/blobs/mainboard/$(MAINBOARDDIR)/me.bin) Path to management engine firmware
    - [*] Add gigabit ethernet firmware
      (3rdparty/blobs/mainboard/$(MAINBOARDDIR)/gbe.bin) Path to gigabit ethernet firmware
      
Devices
    - Graphics initialization (Run VGA Option ROMs)
    - [*] Use native graphics initialization
    - [*] Add a VGA BIOS image
      (/home/$USER/vga-8086-0126.bin) VGA BIOS path and filename
      (8086,0126) VGA device PCI IDs
      
Generic Drivers
    - [*] PS/2 keyboard init
    - [*] Support Intel PCI-e WiFi adapters

Console
    - [*] Squelch AP CPUs from early console.
    - [*] Show POST codes on the debug console

System tables
    - [*] Generate SMBIOS tables

Payload
    - Add a payload (SeaBIOS)
    - SeaBIOS version (master)
    - (3000) PS/2 keyboard controller initialization timeout (milliseconds)
    - [*] Harware init during option ROM execution
    - [*] Include generated option rom that implements legacy VGA BIOS compatibility
    - [*] Use LZMA compression for payloads
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can press &lt;code&gt;F6&lt;/code&gt; to save your config and then press &lt;code&gt;F9&lt;/code&gt; to exit.
Now we can actually compile Coreboot now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;optional-create-cross-compiler&#34;&gt;(Optional) Create Cross Compiler&lt;/h3&gt;
&lt;p&gt;If you donât have an &lt;code&gt;i386&lt;/code&gt; cross compiler you can make one by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make crossgcc-i386
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make iasl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Letâs compile coreboot by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This might take a while.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you canât compile Coreboot, try checking and making sure you did everything correctly.&lt;/p&gt;
&lt;h2 id=&#34;flashing-coreboot&#34;&gt;Flashing Coreboot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WARNING: Proceed with caution, you can possibly brick your computer if you are not careful!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You should now be left with a file named &lt;code&gt;coreboot.rom&lt;/code&gt; in the &lt;code&gt;~/coreboot&lt;/code&gt; directory.
You can copy this file back to your Raspberry PI into order to flash it.&lt;/p&gt;
&lt;p&gt;Now letâs go ahead and read our flash chip again to make sure that our connection is still good.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash01.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash02.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -r flash03.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;md5sum flash01.bin flash02.bin flash03.bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, like before, if all the checksums match, you can go ahead and flash &lt;code&gt;coreboot.rom&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHIP&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -w coreboot.rom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, for the moment of truth, go ahead and boot your Thinkpad.
If it wonât boot, donât sweat, just rebuild and try again.
If Coreboot wonât work on your Thinkpad no matter what you try, then you can just flash a backup of the BIOS that you read earlier and your computer should work just fine.&lt;/p&gt;
&lt;h2 id=&#34;aftermath&#34;&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Congrats!!!&lt;/strong&gt; You successfully freed your computer from the spying eyes of Intel and your local three letter government agency.
You can now enjoy your computing in peace.&lt;/p&gt;
&lt;h3 id=&#34;contact&#34;&gt;Contact&lt;/h3&gt;
&lt;p&gt;If you have any questions or comments you can find my contact info &lt;a href=&#34;https://brycevandegrift.xyz/contact/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Website Redesign</title>
			<link>https://brycev.com/blog/website-redesign/</link>
			<pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/website-redesign/</guid>
			<description>&lt;p&gt;I have decided to redesign most of my website.
Itâs mostly a facelift, but there are a couple under-the-hood changes done.&lt;/p&gt;
&lt;p&gt;I have also decided to officially add a link to my &lt;a href=&#34;https://www.youtube.com/channel/UCOSqzSTg4QZXdi7jvV-9rUg&#34;&gt;YouTube channel&lt;/a&gt; on my homepage, as well as add a link to my &lt;a href=&#34;https://sr.ht/~bpv/&#34;&gt;Sourcehut page&lt;/a&gt; and my &lt;a href=&#34;https://brycevandegrift.xyz/rss.xml&#34;&gt;rss feed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I plan to reorganize my website as time goes on, but for now a simple redesign will do.
I also plan to at least convert my homepage to &lt;a href=&#34;https://www.w3schools.com/Html/html_xhtml.asp&#34;&gt;xhtml&lt;/a&gt; in the future, as I think that I would provide a bit more compatibility with web browsers.&lt;/p&gt;
&lt;p&gt;As time goes on I will make changes to my website as needed.&lt;/p&gt;
&lt;h2 id=&#34;a-note-about-github-and-gitlab&#34;&gt;A note about GitHub and GitLab&lt;/h2&gt;
&lt;p&gt;If you donât know already, I am not a big fan of GitHub.
I donât like having a GitHub account, but itâs almost necessary for collaborating on projects.
I have updated my &lt;a href=&#34;https://github.com/BryceVandegrift&#34;&gt;GitHub account&lt;/a&gt; for hosting my git repos.
Donât expect me to answer issues or accept code from these platforms (for now (although that might change)), for that please visit my Sourcehut page.&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>New Youtube Channel</title>
			<link>https://brycev.com/blog/new-youtube-channel/</link>
			<pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/new-youtube-channel/</guid>
			<description>&lt;p&gt;Recently, I have decided to start up a YouTube channel.
I mostly plan to upload informative videos, but things could always change.
Right now, I am uploading videos about GNU/Linux and other technical topics related to technology, however I believe that I will expand in the future.&lt;/p&gt;
&lt;p&gt;In the future, I plan to upload all of my past and future videos onto Odysee/LBRY as I think itâs a superior platform compared to YouTube.
I might even consider uploading to other niche video sites eventually.&lt;/p&gt;
&lt;p&gt;You can view my first video about GnuPG (GPG) &lt;a href=&#34;https://youtu.be/GhiLR4zRqMI&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCOSqzSTg4QZXdi7jvV-9rUg&#34;&gt;YouTube link&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>Personal Update</title>
			<link>https://brycev.com/blog/personal-update/</link>
			<pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/personal-update/</guid>
			<description>&lt;p&gt;Recently, I have been pretty busy with college classes and havenât had much time to work on personal projects.
In addition to classes I have also been busy with other personal aspects of life which I would not like to disclose currently.
I will be active again once I finish the semester (hopefully).&lt;/p&gt;
&lt;p&gt;If anything comes up, feel free to email me here: &lt;a href=&#34;https://brycevandegrift.xyz/contact/&#34;&gt;https://brycevandegrift.xyz/contact/&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		
		<item>
			<title>My Thoughts on BSDs</title>
			<link>https://brycev.com/blog/my-thoughts-on-bsds/</link>
			<pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/my-thoughts-on-bsds/</guid>
			<description>&lt;p&gt;For those of you who are not a big fan of Linux but want something that caters more to the Unix philosophy, a distribution of BSD (Berkeley Software Distribution) may be right for you.
Unlike Linux, most BSD systemsâ tools, kernels, and programs are built from the ground up for that specific BSD distribution.
This also means that it can take a while for a feature or program thatâs popular on Linux to make its way to a specific BSD distribution.
But, BSD it is worth a try nonetheless.&lt;/p&gt;
&lt;p&gt;There are four major versions of BSD that I believe to be useable as an everyday operating system: FreeBSD, OpenBSD, NetBSD, and DragonFlyBSD.&lt;/p&gt;
&lt;h2 id=&#34;freebsd&#34;&gt;FreeBSD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt; is probably the most popular BSD distribution of all time.
FreeBSD has the most packages, the most support, and the most users compared to any other BSD distribution.
FreeBSDâs default file system choices are UFS (Unix File System) and ZFS (Z File System) which isnât that bad considering ZFS is a pretty reliable file system.
FreeBSD also has support of other file systems like FAT and EXT as well as Linux binary compatibility which is pretty nice.
To be honest FreeBSD has a lot of cool and interesting features that are worth checking out.&lt;/p&gt;
&lt;h2 id=&#34;openbsd&#34;&gt;OpenBSD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; is another flavor of BSD that is focused more on security than anything other operating system.
The people behind OpenBSD are also some of the same people behind projects like OpenSSH, LibreSSL, and even tmux (to some degree).
Although OpenBSD lacks a decent amount of software and certain features, it makes up for it in system security and stability.
Overall, I would say that it is a pretty solid operating system.&lt;/p&gt;
&lt;h2 id=&#34;netbsd&#34;&gt;NetBSD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://netbsd.org/&#34;&gt;NetBSD&lt;/a&gt; is a distribution of BSD that is focused on portability more than any other operating system out there.
NetBSD is also well known for its low resource usage as well.
NetBSD not only has support for amd64, i386, and arm, but it also supports more obscure architectures like mips, powerpc, riscv, and more.
NetBSD is also very small and can be stripped down even from itâs very small state.
I remember hearing rumors about NetBSD being able to run on a literal toaster in the past, which I find pretty impressive.
If you prefer size and portability over anything else, I would recommend NetBSD.&lt;/p&gt;
&lt;h2 id=&#34;dragonflybsd&#34;&gt;DragonFlyBSD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dragonflybsd.org/&#34;&gt;DragonFlyBSD&lt;/a&gt; is a distribution of BSD that is tailored for performance and speed.
I believe that DragonFlyBSD definitely delivers on itâs promise of speed.
Overall multi-threading and multi-processor support as well as speed is very competitive with even the fastest of Linux systems.
Swapcache, a different type of swap made for DragonFlyBSD, also helps with greatly boosting performance for large workloads.
The HAMMER file systems are also very neat.
The HAMMER file systems have instant crash recovery, snapshots, support for multiple volumes, and much more.
If you want a fast and efficient operating system, I would definitely recommend trying DragonFlyBSD.&lt;/p&gt;


&lt;figure &gt;&lt;img src=&#34;https://brycev.com/p/bsd.webp&#34; title=&#34;bsd&#34; alt=&#34;BSD&#34;&gt;&lt;/figure&gt;

</description>
		</item>
		
		<item>
			<title>New Blog</title>
			<link>https://brycev.com/blog/new-blog/</link>
			<pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
			<guid>https://brycev.com/blog/new-blog/</guid>
			<description>&lt;p&gt;Recently, I have been working on a new blog system that takes Markdown and converts it into a very simple HTML page as well as an RSS feed.
The blog system is written entirely in POSIX shell and is around 100 lines of code.&lt;/p&gt;
&lt;p&gt;If successful, it should generate a blog page, an RSS feed, as well as a rolling blog index page.
The only downside is that it requires Pandoc which isn&amp;rsquo;t that small of a package, but it makes making blog posts a lot easier to write as I can write in Markdown instead of HTML.&lt;/p&gt;
&lt;p&gt;I based some of it from Luke Smithâs blog script &lt;a href=&#34;https://github.com/LukeSmithxyz/lb&#34;&gt;here&lt;/a&gt;.
I have added a few quirks of my own and I also plan to greatly expand on it in the future.&lt;/p&gt;
</description>
		</item>
		
	</channel>
</rss>
